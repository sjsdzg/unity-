// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from CommonProto.proto</summary>
  public static partial class CommonProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for CommonProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFDb21tb25Qcm90by5wcm90byJUChFTcWxDb25kaXRpb25Qcm90bxIMCgRu",
            "YW1lGAEgASgJEhEKCXNxbE9wdGlvbhgCIAEoBRIPCgdzcWxUeXBlGAMgASgF",
            "Eg0KBXZhbHVlGAQgASgJQjgKFmNuLmNvbS54ei5wcm90by5jb21tb25CC0Nv",
            "bW1vblByb3RvqgIQWEZyYW1ld29yay5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.SqlConditionProto), global::XFramework.Proto.SqlConditionProto.Parser, new[]{ "Name", "SqlOption", "SqlType", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///sql拼接条件
  /// </summary>
  public sealed partial class SqlConditionProto : pb::IMessage<SqlConditionProto> {
    private static readonly pb::MessageParser<SqlConditionProto> _parser = new pb::MessageParser<SqlConditionProto>(() => new SqlConditionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlConditionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.CommonProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlConditionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlConditionProto(SqlConditionProto other) : this() {
      name_ = other.name_;
      sqlOption_ = other.sqlOption_;
      sqlType_ = other.sqlType_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlConditionProto Clone() {
      return new SqlConditionProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///条件名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sqlOption" field.</summary>
    public const int SqlOptionFieldNumber = 2;
    private int sqlOption_;
    /// <summary>
    ///Sql选项  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SqlOption {
      get { return sqlOption_; }
      set {
        sqlOption_ = value;
      }
    }

    /// <summary>Field number for the "sqlType" field.</summary>
    public const int SqlTypeFieldNumber = 3;
    private int sqlType_;
    /// <summary>
    ///Sql类型          
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SqlType {
      get { return sqlType_; }
      set {
        sqlType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    /// <summary>
    ///条件值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlConditionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlConditionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SqlOption != other.SqlOption) return false;
      if (SqlType != other.SqlType) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SqlOption != 0) hash ^= SqlOption.GetHashCode();
      if (SqlType != 0) hash ^= SqlType.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (SqlOption != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SqlOption);
      }
      if (SqlType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SqlType);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SqlOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SqlOption);
      }
      if (SqlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SqlType);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlConditionProto other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SqlOption != 0) {
        SqlOption = other.SqlOption;
      }
      if (other.SqlType != 0) {
        SqlType = other.SqlType;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            SqlOption = input.ReadInt32();
            break;
          }
          case 24: {
            SqlType = input.ReadInt32();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
