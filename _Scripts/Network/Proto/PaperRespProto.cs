// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PaperRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from PaperRespProto.proto</summary>
  public static partial class PaperRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for PaperRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PaperRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQYXBlclJlc3BQcm90by5wcm90byI+Cg9JbnNlcnRQYXBlclJlc3ASDwoH",
            "c3VjY2VzcxgBIAEoCBIKCgJpZBgCIAEoCRIOCgZkZXRhaWwYAyABKAkiMgoP",
            "RGVsZXRlUGFwZXJSZXNwEg8KB3N1Y2Nlc3MYASABKAgSDgoGZGV0YWlsGAIg",
            "ASgJIjIKD1VwZGF0ZVBhcGVyUmVzcBIPCgdzdWNjZXNzGAEgASgIEg4KBmRl",
            "dGFpbBgCIAEoCSIqCgxHZXRQYXBlclJlc3ASGgoFcGFwZXIYASABKAsyCy5Q",
            "YXBlclByb3RvIjUKF0dldFBhcGVyQnlDb25kaXRpb25SZXNwEhoKBXBhcGVy",
            "GAEgASgLMgsuUGFwZXJQcm90byIvChBMaXN0QWxsUGFwZXJSZXNwEhsKBnBh",
            "cGVycxgBIAMoCzILLlBhcGVyUHJvdG8iNwoYTGlzdFBhcGVyQnlDb25kaXRp",
            "b25SZXNwEhsKBnBhcGVycxgBIAMoCzILLlBhcGVyUHJvdG8iHwoOQ291bnRQ",
            "YXBlclJlc3ASDQoFY291bnQYASABKAUifQoNUGFnZVBhcGVyUmVzcBITCgtj",
            "dXJyZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIUCgx0b3RhbFJl",
            "Y29yZHMYAyABKAUSEgoKdG90YWxQYWdlcxgEIAEoBRIbCgZwYXBlcnMYBSAD",
            "KAsyCy5QYXBlclByb3RvIioKGUNvdW50UGFwZXJCeUNvbmRpdGlvblJlc3AS",
            "DQoFY291bnQYASABKAUiiAEKGFBhZ2VQYXBlckJ5Q29uZGl0aW9uUmVzcBIT",
            "CgtjdXJyZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIUCgx0b3Rh",
            "bFJlY29yZHMYAyABKAUSEgoKdG90YWxQYWdlcxgEIAEoBRIbCgZwYXBlcnMY",
            "BSADKAsyCy5QYXBlclByb3RvIisKFEJhdGNoSW5zZXJ0UGFwZXJSZXNwEhMK",
            "C2JhdGNoUmVzdWx0GAEgASgJIisKFEJhdGNoRGVsZXRlUGFwZXJSZXNwEhMK",
            "C2JhdGNoUmVzdWx0GAEgASgJIu0BCgpQYXBlclByb3RvEgoKAmlkGAEgASgJ",
            "EgwKBG5hbWUYAiABKAkSEgoKc29mdHdhcmVJZBgDIAEoCRISCgpjYXRlZ29y",
            "eUlkGAQgASgJEg4KBnN0YXR1cxgFIAEoBRISCgp0b3RhbFNjb3JlGAYgASgF",
            "EhEKCXBhc3NTY29yZRgHIAEoBRIOCgZwb3N0ZXIYCCABKAkSEgoKY3JlYXRl",
            "VGltZRgJIAEoAxIQCghtb2RpZmllchgKIAEoCRISCgp1cGRhdGVUaW1lGAsg",
            "ASgDEg4KBnJlbWFyaxgMIAEoCRIMCgRkYXRhGA0gASgJQjkKFGNuLmNvbS54",
            "ei5wcm90by5leGFtQg5QYXBlclJlc3BQcm90b6oCEFhGcmFtZXdvcmsuUHJv",
            "dG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertPaperResp), global::XFramework.Proto.InsertPaperResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeletePaperResp), global::XFramework.Proto.DeletePaperResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdatePaperResp), global::XFramework.Proto.UpdatePaperResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetPaperResp), global::XFramework.Proto.GetPaperResp.Parser, new[]{ "Paper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetPaperByConditionResp), global::XFramework.Proto.GetPaperByConditionResp.Parser, new[]{ "Paper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllPaperResp), global::XFramework.Proto.ListAllPaperResp.Parser, new[]{ "Papers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListPaperByConditionResp), global::XFramework.Proto.ListPaperByConditionResp.Parser, new[]{ "Papers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountPaperResp), global::XFramework.Proto.CountPaperResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PagePaperResp), global::XFramework.Proto.PagePaperResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Papers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountPaperByConditionResp), global::XFramework.Proto.CountPaperByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PagePaperByConditionResp), global::XFramework.Proto.PagePaperByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Papers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertPaperResp), global::XFramework.Proto.BatchInsertPaperResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeletePaperResp), global::XFramework.Proto.BatchDeletePaperResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PaperProto), global::XFramework.Proto.PaperProto.Parser, new[]{ "Id", "Name", "SoftwareId", "CategoryId", "Status", "TotalScore", "PassScore", "Poster", "CreateTime", "Modifier", "UpdateTime", "Remark", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add paper
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertPaperResp : pb::IMessage<InsertPaperResp> {
    private static readonly pb::MessageParser<InsertPaperResp> _parser = new pb::MessageParser<InsertPaperResp>(() => new InsertPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperResp(InsertPaperResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperResp Clone() {
      return new InsertPaperResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertPaperResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete paper
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeletePaperResp : pb::IMessage<DeletePaperResp> {
    private static readonly pb::MessageParser<DeletePaperResp> _parser = new pb::MessageParser<DeletePaperResp>(() => new DeletePaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperResp(DeletePaperResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperResp Clone() {
      return new DeletePaperResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePaperResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update paper
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdatePaperResp : pb::IMessage<UpdatePaperResp> {
    private static readonly pb::MessageParser<UpdatePaperResp> _parser = new pb::MessageParser<UpdatePaperResp>(() => new UpdatePaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperResp(UpdatePaperResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperResp Clone() {
      return new UpdatePaperResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePaperResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get paper by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetPaperResp : pb::IMessage<GetPaperResp> {
    private static readonly pb::MessageParser<GetPaperResp> _parser = new pb::MessageParser<GetPaperResp>(() => new GetPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperResp(GetPaperResp other) : this() {
      Paper = other.paper_ != null ? other.Paper.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperResp Clone() {
      return new GetPaperResp(this);
    }

    /// <summary>Field number for the "paper" field.</summary>
    public const int PaperFieldNumber = 1;
    private global::XFramework.Proto.PaperProto paper_;
    /// <summary>
    ///试卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.PaperProto Paper {
      get { return paper_; }
      set {
        paper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Paper, other.Paper)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paper_ != null) hash ^= Paper.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paper_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPaperResp other) {
      if (other == null) {
        return;
      }
      if (other.paper_ != null) {
        if (paper_ == null) {
          paper_ = new global::XFramework.Proto.PaperProto();
        }
        Paper.MergeFrom(other.Paper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (paper_ == null) {
              paper_ = new global::XFramework.Proto.PaperProto();
            }
            input.ReadMessage(paper_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get paper by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetPaperByConditionResp : pb::IMessage<GetPaperByConditionResp> {
    private static readonly pb::MessageParser<GetPaperByConditionResp> _parser = new pb::MessageParser<GetPaperByConditionResp>(() => new GetPaperByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPaperByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperByConditionResp(GetPaperByConditionResp other) : this() {
      Paper = other.paper_ != null ? other.Paper.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperByConditionResp Clone() {
      return new GetPaperByConditionResp(this);
    }

    /// <summary>Field number for the "paper" field.</summary>
    public const int PaperFieldNumber = 1;
    private global::XFramework.Proto.PaperProto paper_;
    /// <summary>
    ///试卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.PaperProto Paper {
      get { return paper_; }
      set {
        paper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPaperByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPaperByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Paper, other.Paper)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paper_ != null) hash ^= Paper.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paper_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Paper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPaperByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.paper_ != null) {
        if (paper_ == null) {
          paper_ = new global::XFramework.Proto.PaperProto();
        }
        Paper.MergeFrom(other.Paper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (paper_ == null) {
              paper_ = new global::XFramework.Proto.PaperProto();
            }
            input.ReadMessage(paper_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all paper
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllPaperResp : pb::IMessage<ListAllPaperResp> {
    private static readonly pb::MessageParser<ListAllPaperResp> _parser = new pb::MessageParser<ListAllPaperResp>(() => new ListAllPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperResp(ListAllPaperResp other) : this() {
      papers_ = other.papers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperResp Clone() {
      return new ListAllPaperResp(this);
    }

    /// <summary>Field number for the "papers" field.</summary>
    public const int PapersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperProto> _repeated_papers_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.PaperProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperProto> papers_ = new pbc::RepeatedField<global::XFramework.Proto.PaperProto>();
    /// <summary>
    ///The list of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperProto> Papers {
      get { return papers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!papers_.Equals(other.papers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= papers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      papers_.WriteTo(output, _repeated_papers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += papers_.CalculateSize(_repeated_papers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllPaperResp other) {
      if (other == null) {
        return;
      }
      papers_.Add(other.papers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            papers_.AddEntriesFrom(input, _repeated_papers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list paper by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListPaperByConditionResp : pb::IMessage<ListPaperByConditionResp> {
    private static readonly pb::MessageParser<ListPaperByConditionResp> _parser = new pb::MessageParser<ListPaperByConditionResp>(() => new ListPaperByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaperByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperByConditionResp(ListPaperByConditionResp other) : this() {
      papers_ = other.papers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperByConditionResp Clone() {
      return new ListPaperByConditionResp(this);
    }

    /// <summary>Field number for the "papers" field.</summary>
    public const int PapersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperProto> _repeated_papers_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.PaperProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperProto> papers_ = new pbc::RepeatedField<global::XFramework.Proto.PaperProto>();
    /// <summary>
    ///The list of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperProto> Papers {
      get { return papers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaperByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaperByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!papers_.Equals(other.papers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= papers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      papers_.WriteTo(output, _repeated_papers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += papers_.CalculateSize(_repeated_papers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaperByConditionResp other) {
      if (other == null) {
        return;
      }
      papers_.Add(other.papers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            papers_.AddEntriesFrom(input, _repeated_papers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count paper
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountPaperResp : pb::IMessage<CountPaperResp> {
    private static readonly pb::MessageParser<CountPaperResp> _parser = new pb::MessageParser<CountPaperResp>(() => new CountPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperResp(CountPaperResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperResp Clone() {
      return new CountPaperResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountPaperResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page paper
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PagePaperResp : pb::IMessage<PagePaperResp> {
    private static readonly pb::MessageParser<PagePaperResp> _parser = new pb::MessageParser<PagePaperResp>(() => new PagePaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PagePaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperResp(PagePaperResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      papers_ = other.papers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperResp Clone() {
      return new PagePaperResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "papers" field.</summary>
    public const int PapersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperProto> _repeated_papers_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.PaperProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperProto> papers_ = new pbc::RepeatedField<global::XFramework.Proto.PaperProto>();
    /// <summary>
    ///The list of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperProto> Papers {
      get { return papers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PagePaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PagePaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!papers_.Equals(other.papers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= papers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      papers_.WriteTo(output, _repeated_papers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += papers_.CalculateSize(_repeated_papers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PagePaperResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      papers_.Add(other.papers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            papers_.AddEntriesFrom(input, _repeated_papers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count paper by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountPaperByConditionResp : pb::IMessage<CountPaperByConditionResp> {
    private static readonly pb::MessageParser<CountPaperByConditionResp> _parser = new pb::MessageParser<CountPaperByConditionResp>(() => new CountPaperByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountPaperByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperByConditionResp(CountPaperByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperByConditionResp Clone() {
      return new CountPaperByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountPaperByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountPaperByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountPaperByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page paper by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PagePaperByConditionResp : pb::IMessage<PagePaperByConditionResp> {
    private static readonly pb::MessageParser<PagePaperByConditionResp> _parser = new pb::MessageParser<PagePaperByConditionResp>(() => new PagePaperByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PagePaperByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperByConditionResp(PagePaperByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      papers_ = other.papers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperByConditionResp Clone() {
      return new PagePaperByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "papers" field.</summary>
    public const int PapersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperProto> _repeated_papers_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.PaperProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperProto> papers_ = new pbc::RepeatedField<global::XFramework.Proto.PaperProto>();
    /// <summary>
    ///The list of paper
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperProto> Papers {
      get { return papers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PagePaperByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PagePaperByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!papers_.Equals(other.papers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= papers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      papers_.WriteTo(output, _repeated_papers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += papers_.CalculateSize(_repeated_papers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PagePaperByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      papers_.Add(other.papers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            papers_.AddEntriesFrom(input, _repeated_papers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert paper
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertPaperResp : pb::IMessage<BatchInsertPaperResp> {
    private static readonly pb::MessageParser<BatchInsertPaperResp> _parser = new pb::MessageParser<BatchInsertPaperResp>(() => new BatchInsertPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperResp(BatchInsertPaperResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperResp Clone() {
      return new BatchInsertPaperResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加试卷的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertPaperResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete paper
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeletePaperResp : pb::IMessage<BatchDeletePaperResp> {
    private static readonly pb::MessageParser<BatchDeletePaperResp> _parser = new pb::MessageParser<BatchDeletePaperResp>(() => new BatchDeletePaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeletePaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperResp(BatchDeletePaperResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperResp Clone() {
      return new BatchDeletePaperResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除试卷的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeletePaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeletePaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeletePaperResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///试卷
  /// </summary>
  public sealed partial class PaperProto : pb::IMessage<PaperProto> {
    private static readonly pb::MessageParser<PaperProto> _parser = new pb::MessageParser<PaperProto>(() => new PaperProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaperProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperProto(PaperProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      softwareId_ = other.softwareId_;
      categoryId_ = other.categoryId_;
      status_ = other.status_;
      totalScore_ = other.totalScore_;
      passScore_ = other.passScore_;
      poster_ = other.poster_;
      createTime_ = other.createTime_;
      modifier_ = other.modifier_;
      updateTime_ = other.updateTime_;
      remark_ = other.remark_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperProto Clone() {
      return new PaperProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试卷id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///试卷名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 4;
    private string categoryId_ = "";
    /// <summary>
    ///试卷仓库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    /// <summary>
    ///试卷状态: 0:关闭 1:开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 6;
    private int totalScore_;
    /// <summary>
    ///总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "passScore" field.</summary>
    public const int PassScoreFieldNumber = 7;
    private int passScore_;
    /// <summary>
    ///及格分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassScore {
      get { return passScore_; }
      set {
        passScore_ = value;
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 8;
    private string poster_ = "";
    /// <summary>
    ///创建人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private long createTime_;
    /// <summary>
    ///创建日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 10;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 11;
    private long updateTime_;
    /// <summary>
    ///修改日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 12;
    private string remark_ = "";
    /// <summary>
    ///试卷说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 13;
    private string data_ = "";
    /// <summary>
    ///试卷数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaperProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaperProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Status != other.Status) return false;
      if (TotalScore != other.TotalScore) return false;
      if (PassScore != other.PassScore) return false;
      if (Poster != other.Poster) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Modifier != other.Modifier) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (Remark != other.Remark) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (CategoryId.Length != 0) hash ^= CategoryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
      if (PassScore != 0) hash ^= PassScore.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (CategoryId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CategoryId);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalScore);
      }
      if (PassScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassScore);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Poster);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreateTime);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Modifier);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UpdateTime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Remark);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (CategoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (PassScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassScore);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaperProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.CategoryId.Length != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TotalScore != 0) {
        TotalScore = other.TotalScore;
      }
      if (other.PassScore != 0) {
        PassScore = other.PassScore;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 34: {
            CategoryId = input.ReadString();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 56: {
            PassScore = input.ReadInt32();
            break;
          }
          case 66: {
            Poster = input.ReadString();
            break;
          }
          case 72: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 82: {
            Modifier = input.ReadString();
            break;
          }
          case 88: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 98: {
            Remark = input.ReadString();
            break;
          }
          case 106: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
