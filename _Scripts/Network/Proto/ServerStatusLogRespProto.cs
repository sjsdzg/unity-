// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerStatusLogRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from ServerStatusLogRespProto.proto</summary>
  public static partial class ServerStatusLogRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for ServerStatusLogRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerStatusLogRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5TZXJ2ZXJTdGF0dXNMb2dSZXNwUHJvdG8ucHJvdG8iSAoZSW5zZXJ0U2Vy",
            "dmVyU3RhdHVzTG9nUmVzcBIPCgdzdWNjZXNzGAEgASgIEgoKAmlkGAIgASgJ",
            "Eg4KBmRldGFpbBgDIAEoCSI8ChlEZWxldGVTZXJ2ZXJTdGF0dXNMb2dSZXNw",
            "Eg8KB3N1Y2Nlc3MYASABKAgSDgoGZGV0YWlsGAIgASgJIjwKGVVwZGF0ZVNl",
            "cnZlclN0YXR1c0xvZ1Jlc3ASDwoHc3VjY2VzcxgBIAEoCBIOCgZkZXRhaWwY",
            "AiABKAkiSAoWR2V0U2VydmVyU3RhdHVzTG9nUmVzcBIuCg9zZXJ2ZXJTdGF0",
            "dXNMb2cYASABKAsyFS5TZXJ2ZXJTdGF0dXNMb2dQcm90byJTCiFHZXRTZXJ2",
            "ZXJTdGF0dXNMb2dCeUNvbmRpdGlvblJlc3ASLgoPc2VydmVyU3RhdHVzTG9n",
            "GAEgASgLMhUuU2VydmVyU3RhdHVzTG9nUHJvdG8iTQoaTGlzdEFsbFNlcnZl",
            "clN0YXR1c0xvZ1Jlc3ASLwoQc2VydmVyU3RhdHVzTG9ncxgBIAMoCzIVLlNl",
            "cnZlclN0YXR1c0xvZ1Byb3RvIlUKIkxpc3RTZXJ2ZXJTdGF0dXNMb2dCeUNv",
            "bmRpdGlvblJlc3ASLwoQc2VydmVyU3RhdHVzTG9ncxgBIAMoCzIVLlNlcnZl",
            "clN0YXR1c0xvZ1Byb3RvIikKGENvdW50U2VydmVyU3RhdHVzTG9nUmVzcBIN",
            "CgVjb3VudBgBIAEoBSKbAQoXUGFnZVNlcnZlclN0YXR1c0xvZ1Jlc3ASEwoL",
            "Y3VycmVudFBhZ2UYASABKAUSEAoIcGFnZVNpemUYAiABKAUSFAoMdG90YWxS",
            "ZWNvcmRzGAMgASgFEhIKCnRvdGFsUGFnZXMYBCABKAUSLwoQc2VydmVyU3Rh",
            "dHVzTG9ncxgFIAMoCzIVLlNlcnZlclN0YXR1c0xvZ1Byb3RvIjQKI0NvdW50",
            "U2VydmVyU3RhdHVzTG9nQnlDb25kaXRpb25SZXNwEg0KBWNvdW50GAEgASgF",
            "IqYBCiJQYWdlU2VydmVyU3RhdHVzTG9nQnlDb25kaXRpb25SZXNwEhMKC2N1",
            "cnJlbnRQYWdlGAEgASgFEhAKCHBhZ2VTaXplGAIgASgFEhQKDHRvdGFsUmVj",
            "b3JkcxgDIAEoBRISCgp0b3RhbFBhZ2VzGAQgASgFEi8KEHNlcnZlclN0YXR1",
            "c0xvZ3MYBSADKAsyFS5TZXJ2ZXJTdGF0dXNMb2dQcm90byI1Ch5CYXRjaElu",
            "c2VydFNlcnZlclN0YXR1c0xvZ1Jlc3ASEwoLYmF0Y2hSZXN1bHQYASABKAki",
            "NQoeQmF0Y2hEZWxldGVTZXJ2ZXJTdGF0dXNMb2dSZXNwEhMKC2JhdGNoUmVz",
            "dWx0GAEgASgJIqQBChRTZXJ2ZXJTdGF0dXNMb2dQcm90bxIKCgJpZBgBIAEo",
            "CRISCgpjcmVhdGVUaW1lGAIgASgDEgsKA2NwdRgDIAEoAhIOCgZtZW1vcnkY",
            "BCABKAISEwoLY29ubmVjdGlvbnMYBSABKAUSEwoLdXBsb2FkU3BlZWQYBiAB",
            "KAUSFQoNZG93bmxvYWRTcGVlZBgHIAEoBRIOCgZyZW1hcmsYCCABKAlCQgoT",
            "Y24uY29tLnh6LnByb3RvLmxvZ0IYU2VydmVyU3RhdHVzTG9nUmVzcFByb3Rv",
            "qgIQWEZyYW1ld29yay5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertServerStatusLogResp), global::XFramework.Proto.InsertServerStatusLogResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteServerStatusLogResp), global::XFramework.Proto.DeleteServerStatusLogResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateServerStatusLogResp), global::XFramework.Proto.UpdateServerStatusLogResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetServerStatusLogResp), global::XFramework.Proto.GetServerStatusLogResp.Parser, new[]{ "ServerStatusLog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetServerStatusLogByConditionResp), global::XFramework.Proto.GetServerStatusLogByConditionResp.Parser, new[]{ "ServerStatusLog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllServerStatusLogResp), global::XFramework.Proto.ListAllServerStatusLogResp.Parser, new[]{ "ServerStatusLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListServerStatusLogByConditionResp), global::XFramework.Proto.ListServerStatusLogByConditionResp.Parser, new[]{ "ServerStatusLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountServerStatusLogResp), global::XFramework.Proto.CountServerStatusLogResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageServerStatusLogResp), global::XFramework.Proto.PageServerStatusLogResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "ServerStatusLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountServerStatusLogByConditionResp), global::XFramework.Proto.CountServerStatusLogByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageServerStatusLogByConditionResp), global::XFramework.Proto.PageServerStatusLogByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "ServerStatusLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertServerStatusLogResp), global::XFramework.Proto.BatchInsertServerStatusLogResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteServerStatusLogResp), global::XFramework.Proto.BatchDeleteServerStatusLogResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ServerStatusLogProto), global::XFramework.Proto.ServerStatusLogProto.Parser, new[]{ "Id", "CreateTime", "Cpu", "Memory", "Connections", "UploadSpeed", "DownloadSpeed", "Remark" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add serverStatusLog
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertServerStatusLogResp : pb::IMessage<InsertServerStatusLogResp> {
    private static readonly pb::MessageParser<InsertServerStatusLogResp> _parser = new pb::MessageParser<InsertServerStatusLogResp>(() => new InsertServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertServerStatusLogResp(InsertServerStatusLogResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertServerStatusLogResp Clone() {
      return new InsertServerStatusLogResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete serverStatusLog
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteServerStatusLogResp : pb::IMessage<DeleteServerStatusLogResp> {
    private static readonly pb::MessageParser<DeleteServerStatusLogResp> _parser = new pb::MessageParser<DeleteServerStatusLogResp>(() => new DeleteServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServerStatusLogResp(DeleteServerStatusLogResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServerStatusLogResp Clone() {
      return new DeleteServerStatusLogResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update serverStatusLog
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateServerStatusLogResp : pb::IMessage<UpdateServerStatusLogResp> {
    private static readonly pb::MessageParser<UpdateServerStatusLogResp> _parser = new pb::MessageParser<UpdateServerStatusLogResp>(() => new UpdateServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerStatusLogResp(UpdateServerStatusLogResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServerStatusLogResp Clone() {
      return new UpdateServerStatusLogResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get serverStatusLog by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetServerStatusLogResp : pb::IMessage<GetServerStatusLogResp> {
    private static readonly pb::MessageParser<GetServerStatusLogResp> _parser = new pb::MessageParser<GetServerStatusLogResp>(() => new GetServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogResp(GetServerStatusLogResp other) : this() {
      ServerStatusLog = other.serverStatusLog_ != null ? other.ServerStatusLog.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogResp Clone() {
      return new GetServerStatusLogResp(this);
    }

    /// <summary>Field number for the "serverStatusLog" field.</summary>
    public const int ServerStatusLogFieldNumber = 1;
    private global::XFramework.Proto.ServerStatusLogProto serverStatusLog_;
    /// <summary>
    ///服务器状态日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.ServerStatusLogProto ServerStatusLog {
      get { return serverStatusLog_; }
      set {
        serverStatusLog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerStatusLog, other.ServerStatusLog)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverStatusLog_ != null) hash ^= ServerStatusLog.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverStatusLog_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerStatusLog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverStatusLog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerStatusLog);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.serverStatusLog_ != null) {
        if (serverStatusLog_ == null) {
          serverStatusLog_ = new global::XFramework.Proto.ServerStatusLogProto();
        }
        ServerStatusLog.MergeFrom(other.ServerStatusLog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serverStatusLog_ == null) {
              serverStatusLog_ = new global::XFramework.Proto.ServerStatusLogProto();
            }
            input.ReadMessage(serverStatusLog_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get serverStatusLog by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetServerStatusLogByConditionResp : pb::IMessage<GetServerStatusLogByConditionResp> {
    private static readonly pb::MessageParser<GetServerStatusLogByConditionResp> _parser = new pb::MessageParser<GetServerStatusLogByConditionResp>(() => new GetServerStatusLogByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServerStatusLogByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogByConditionResp(GetServerStatusLogByConditionResp other) : this() {
      ServerStatusLog = other.serverStatusLog_ != null ? other.ServerStatusLog.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServerStatusLogByConditionResp Clone() {
      return new GetServerStatusLogByConditionResp(this);
    }

    /// <summary>Field number for the "serverStatusLog" field.</summary>
    public const int ServerStatusLogFieldNumber = 1;
    private global::XFramework.Proto.ServerStatusLogProto serverStatusLog_;
    /// <summary>
    ///服务器状态日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.ServerStatusLogProto ServerStatusLog {
      get { return serverStatusLog_; }
      set {
        serverStatusLog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServerStatusLogByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServerStatusLogByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerStatusLog, other.ServerStatusLog)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverStatusLog_ != null) hash ^= ServerStatusLog.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverStatusLog_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerStatusLog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverStatusLog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerStatusLog);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServerStatusLogByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.serverStatusLog_ != null) {
        if (serverStatusLog_ == null) {
          serverStatusLog_ = new global::XFramework.Proto.ServerStatusLogProto();
        }
        ServerStatusLog.MergeFrom(other.ServerStatusLog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serverStatusLog_ == null) {
              serverStatusLog_ = new global::XFramework.Proto.ServerStatusLogProto();
            }
            input.ReadMessage(serverStatusLog_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all serverStatusLog
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllServerStatusLogResp : pb::IMessage<ListAllServerStatusLogResp> {
    private static readonly pb::MessageParser<ListAllServerStatusLogResp> _parser = new pb::MessageParser<ListAllServerStatusLogResp>(() => new ListAllServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllServerStatusLogResp(ListAllServerStatusLogResp other) : this() {
      serverStatusLogs_ = other.serverStatusLogs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllServerStatusLogResp Clone() {
      return new ListAllServerStatusLogResp(this);
    }

    /// <summary>Field number for the "serverStatusLogs" field.</summary>
    public const int ServerStatusLogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ServerStatusLogProto> _repeated_serverStatusLogs_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.ServerStatusLogProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> serverStatusLogs_ = new pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto>();
    /// <summary>
    ///The list of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> ServerStatusLogs {
      get { return serverStatusLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverStatusLogs_.Equals(other.serverStatusLogs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverStatusLogs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverStatusLogs_.WriteTo(output, _repeated_serverStatusLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverStatusLogs_.CalculateSize(_repeated_serverStatusLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      serverStatusLogs_.Add(other.serverStatusLogs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serverStatusLogs_.AddEntriesFrom(input, _repeated_serverStatusLogs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list serverStatusLog by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListServerStatusLogByConditionResp : pb::IMessage<ListServerStatusLogByConditionResp> {
    private static readonly pb::MessageParser<ListServerStatusLogByConditionResp> _parser = new pb::MessageParser<ListServerStatusLogByConditionResp>(() => new ListServerStatusLogByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServerStatusLogByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServerStatusLogByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServerStatusLogByConditionResp(ListServerStatusLogByConditionResp other) : this() {
      serverStatusLogs_ = other.serverStatusLogs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServerStatusLogByConditionResp Clone() {
      return new ListServerStatusLogByConditionResp(this);
    }

    /// <summary>Field number for the "serverStatusLogs" field.</summary>
    public const int ServerStatusLogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ServerStatusLogProto> _repeated_serverStatusLogs_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.ServerStatusLogProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> serverStatusLogs_ = new pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto>();
    /// <summary>
    ///The list of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> ServerStatusLogs {
      get { return serverStatusLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServerStatusLogByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServerStatusLogByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverStatusLogs_.Equals(other.serverStatusLogs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverStatusLogs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverStatusLogs_.WriteTo(output, _repeated_serverStatusLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverStatusLogs_.CalculateSize(_repeated_serverStatusLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServerStatusLogByConditionResp other) {
      if (other == null) {
        return;
      }
      serverStatusLogs_.Add(other.serverStatusLogs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serverStatusLogs_.AddEntriesFrom(input, _repeated_serverStatusLogs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count serverStatusLog
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountServerStatusLogResp : pb::IMessage<CountServerStatusLogResp> {
    private static readonly pb::MessageParser<CountServerStatusLogResp> _parser = new pb::MessageParser<CountServerStatusLogResp>(() => new CountServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogResp(CountServerStatusLogResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogResp Clone() {
      return new CountServerStatusLogResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page serverStatusLog
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PageServerStatusLogResp : pb::IMessage<PageServerStatusLogResp> {
    private static readonly pb::MessageParser<PageServerStatusLogResp> _parser = new pb::MessageParser<PageServerStatusLogResp>(() => new PageServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogResp(PageServerStatusLogResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      serverStatusLogs_ = other.serverStatusLogs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogResp Clone() {
      return new PageServerStatusLogResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "serverStatusLogs" field.</summary>
    public const int ServerStatusLogsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ServerStatusLogProto> _repeated_serverStatusLogs_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.ServerStatusLogProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> serverStatusLogs_ = new pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto>();
    /// <summary>
    ///The list of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> ServerStatusLogs {
      get { return serverStatusLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!serverStatusLogs_.Equals(other.serverStatusLogs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= serverStatusLogs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      serverStatusLogs_.WriteTo(output, _repeated_serverStatusLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += serverStatusLogs_.CalculateSize(_repeated_serverStatusLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      serverStatusLogs_.Add(other.serverStatusLogs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            serverStatusLogs_.AddEntriesFrom(input, _repeated_serverStatusLogs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count serverStatusLog by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountServerStatusLogByConditionResp : pb::IMessage<CountServerStatusLogByConditionResp> {
    private static readonly pb::MessageParser<CountServerStatusLogByConditionResp> _parser = new pb::MessageParser<CountServerStatusLogByConditionResp>(() => new CountServerStatusLogByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountServerStatusLogByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogByConditionResp(CountServerStatusLogByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountServerStatusLogByConditionResp Clone() {
      return new CountServerStatusLogByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountServerStatusLogByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountServerStatusLogByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountServerStatusLogByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page serverStatusLog by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PageServerStatusLogByConditionResp : pb::IMessage<PageServerStatusLogByConditionResp> {
    private static readonly pb::MessageParser<PageServerStatusLogByConditionResp> _parser = new pb::MessageParser<PageServerStatusLogByConditionResp>(() => new PageServerStatusLogByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageServerStatusLogByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogByConditionResp(PageServerStatusLogByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      serverStatusLogs_ = other.serverStatusLogs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageServerStatusLogByConditionResp Clone() {
      return new PageServerStatusLogByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "serverStatusLogs" field.</summary>
    public const int ServerStatusLogsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ServerStatusLogProto> _repeated_serverStatusLogs_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.ServerStatusLogProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> serverStatusLogs_ = new pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto>();
    /// <summary>
    ///The list of serverStatusLog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ServerStatusLogProto> ServerStatusLogs {
      get { return serverStatusLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageServerStatusLogByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageServerStatusLogByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!serverStatusLogs_.Equals(other.serverStatusLogs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= serverStatusLogs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      serverStatusLogs_.WriteTo(output, _repeated_serverStatusLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += serverStatusLogs_.CalculateSize(_repeated_serverStatusLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageServerStatusLogByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      serverStatusLogs_.Add(other.serverStatusLogs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            serverStatusLogs_.AddEntriesFrom(input, _repeated_serverStatusLogs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert serverStatusLog
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertServerStatusLogResp : pb::IMessage<BatchInsertServerStatusLogResp> {
    private static readonly pb::MessageParser<BatchInsertServerStatusLogResp> _parser = new pb::MessageParser<BatchInsertServerStatusLogResp>(() => new BatchInsertServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertServerStatusLogResp(BatchInsertServerStatusLogResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertServerStatusLogResp Clone() {
      return new BatchInsertServerStatusLogResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加服务器状态日志的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete serverStatusLog
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteServerStatusLogResp : pb::IMessage<BatchDeleteServerStatusLogResp> {
    private static readonly pb::MessageParser<BatchDeleteServerStatusLogResp> _parser = new pb::MessageParser<BatchDeleteServerStatusLogResp>(() => new BatchDeleteServerStatusLogResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteServerStatusLogResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteServerStatusLogResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteServerStatusLogResp(BatchDeleteServerStatusLogResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteServerStatusLogResp Clone() {
      return new BatchDeleteServerStatusLogResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除服务器状态日志的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteServerStatusLogResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteServerStatusLogResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteServerStatusLogResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器状态日志
  /// </summary>
  public sealed partial class ServerStatusLogProto : pb::IMessage<ServerStatusLogProto> {
    private static readonly pb::MessageParser<ServerStatusLogProto> _parser = new pb::MessageParser<ServerStatusLogProto>(() => new ServerStatusLogProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatusLogProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ServerStatusLogRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusLogProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusLogProto(ServerStatusLogProto other) : this() {
      id_ = other.id_;
      createTime_ = other.createTime_;
      cpu_ = other.cpu_;
      memory_ = other.memory_;
      connections_ = other.connections_;
      uploadSpeed_ = other.uploadSpeed_;
      downloadSpeed_ = other.downloadSpeed_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusLogProto Clone() {
      return new ServerStatusLogProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 3;
    private float cpu_;
    /// <summary>
    ///cpu使用率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 4;
    private float memory_;
    /// <summary>
    ///内存使用率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "connections" field.</summary>
    public const int ConnectionsFieldNumber = 5;
    private int connections_;
    /// <summary>
    ///连接数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Connections {
      get { return connections_; }
      set {
        connections_ = value;
      }
    }

    /// <summary>Field number for the "uploadSpeed" field.</summary>
    public const int UploadSpeedFieldNumber = 6;
    private int uploadSpeed_;
    /// <summary>
    ///上传速度 kb/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UploadSpeed {
      get { return uploadSpeed_; }
      set {
        uploadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "downloadSpeed" field.</summary>
    public const int DownloadSpeedFieldNumber = 7;
    private int downloadSpeed_;
    /// <summary>
    ///下载速度 kb/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownloadSpeed {
      get { return downloadSpeed_; }
      set {
        downloadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 8;
    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatusLogProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatusLogProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Cpu != other.Cpu) return false;
      if (Memory != other.Memory) return false;
      if (Connections != other.Connections) return false;
      if (UploadSpeed != other.UploadSpeed) return false;
      if (DownloadSpeed != other.DownloadSpeed) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Cpu != 0F) hash ^= Cpu.GetHashCode();
      if (Memory != 0F) hash ^= Memory.GetHashCode();
      if (Connections != 0) hash ^= Connections.GetHashCode();
      if (UploadSpeed != 0) hash ^= UploadSpeed.GetHashCode();
      if (DownloadSpeed != 0) hash ^= DownloadSpeed.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreateTime);
      }
      if (Cpu != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Cpu);
      }
      if (Memory != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Memory);
      }
      if (Connections != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Connections);
      }
      if (UploadSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UploadSpeed);
      }
      if (DownloadSpeed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DownloadSpeed);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Cpu != 0F) {
        size += 1 + 4;
      }
      if (Memory != 0F) {
        size += 1 + 4;
      }
      if (Connections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Connections);
      }
      if (UploadSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UploadSpeed);
      }
      if (DownloadSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownloadSpeed);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatusLogProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Cpu != 0F) {
        Cpu = other.Cpu;
      }
      if (other.Memory != 0F) {
        Memory = other.Memory;
      }
      if (other.Connections != 0) {
        Connections = other.Connections;
      }
      if (other.UploadSpeed != 0) {
        UploadSpeed = other.UploadSpeed;
      }
      if (other.DownloadSpeed != 0) {
        DownloadSpeed = other.DownloadSpeed;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 29: {
            Cpu = input.ReadFloat();
            break;
          }
          case 37: {
            Memory = input.ReadFloat();
            break;
          }
          case 40: {
            Connections = input.ReadInt32();
            break;
          }
          case 48: {
            UploadSpeed = input.ReadInt32();
            break;
          }
          case 56: {
            DownloadSpeed = input.ReadInt32();
            break;
          }
          case 66: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
