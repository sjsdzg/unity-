// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExamBaseRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from ExamBaseRespProto.proto</summary>
  public static partial class ExamBaseRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for ExamBaseRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExamBaseRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdFeGFtQmFzZVJlc3BQcm90by5wcm90byKvAQoTR2V0RXhhbUJhc2VJbmZv",
            "UmVzcBISCgpxdWVzTnVtYmVyGAEgASgFEhAKCHF1ZXNEZXNjGAIgASgJEhIK",
            "CnVzZXJOdW1iZXIYAyABKAUSEAoIdXNlckRlc2MYBCABKAkSEwoLcGFwZXJO",
            "dW1iZXIYBSABKAUSEQoJcGFwZXJEZXNjGAYgASgJEhIKCmV4YW1OdW1iZXIY",
            "ByABKAUSEAoIZXhhbURlc2MYCCABKAlCQQoZY24uY29tLnh6LnByb3RvLmV4",
            "YW1fYmFzZUIRRXhhbUJhc2VSZXNwUHJvdG+qAhBYRnJhbWV3b3JrLlByb3Rv",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetExamBaseInfoResp), global::XFramework.Proto.GetExamBaseInfoResp.Parser, new[]{ "QuesNumber", "QuesDesc", "UserNumber", "UserDesc", "PaperNumber", "PaperDesc", "ExamNumber", "ExamDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///考试系统基本信息的请求
  ///commandId = 0x00B1
  /// </summary>
  public sealed partial class GetExamBaseInfoResp : pb::IMessage<GetExamBaseInfoResp> {
    private static readonly pb::MessageParser<GetExamBaseInfoResp> _parser = new pb::MessageParser<GetExamBaseInfoResp>(() => new GetExamBaseInfoResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExamBaseInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBaseRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamBaseInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamBaseInfoResp(GetExamBaseInfoResp other) : this() {
      quesNumber_ = other.quesNumber_;
      quesDesc_ = other.quesDesc_;
      userNumber_ = other.userNumber_;
      userDesc_ = other.userDesc_;
      paperNumber_ = other.paperNumber_;
      paperDesc_ = other.paperDesc_;
      examNumber_ = other.examNumber_;
      examDesc_ = other.examDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamBaseInfoResp Clone() {
      return new GetExamBaseInfoResp(this);
    }

    /// <summary>Field number for the "quesNumber" field.</summary>
    public const int QuesNumberFieldNumber = 1;
    private int quesNumber_;
    /// <summary>
    ///试题数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuesNumber {
      get { return quesNumber_; }
      set {
        quesNumber_ = value;
      }
    }

    /// <summary>Field number for the "quesDesc" field.</summary>
    public const int QuesDescFieldNumber = 2;
    private string quesDesc_ = "";
    /// <summary>
    ///试题描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuesDesc {
      get { return quesDesc_; }
      set {
        quesDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userNumber" field.</summary>
    public const int UserNumberFieldNumber = 3;
    private int userNumber_;
    /// <summary>
    ///用户数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserNumber {
      get { return userNumber_; }
      set {
        userNumber_ = value;
      }
    }

    /// <summary>Field number for the "userDesc" field.</summary>
    public const int UserDescFieldNumber = 4;
    private string userDesc_ = "";
    /// <summary>
    ///用户描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserDesc {
      get { return userDesc_; }
      set {
        userDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paperNumber" field.</summary>
    public const int PaperNumberFieldNumber = 5;
    private int paperNumber_;
    /// <summary>
    ///试卷数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaperNumber {
      get { return paperNumber_; }
      set {
        paperNumber_ = value;
      }
    }

    /// <summary>Field number for the "paperDesc" field.</summary>
    public const int PaperDescFieldNumber = 6;
    private string paperDesc_ = "";
    /// <summary>
    ///试卷描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaperDesc {
      get { return paperDesc_; }
      set {
        paperDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examNumber" field.</summary>
    public const int ExamNumberFieldNumber = 7;
    private int examNumber_;
    /// <summary>
    ///考试数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExamNumber {
      get { return examNumber_; }
      set {
        examNumber_ = value;
      }
    }

    /// <summary>Field number for the "examDesc" field.</summary>
    public const int ExamDescFieldNumber = 8;
    private string examDesc_ = "";
    /// <summary>
    ///考试描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExamDesc {
      get { return examDesc_; }
      set {
        examDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExamBaseInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExamBaseInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuesNumber != other.QuesNumber) return false;
      if (QuesDesc != other.QuesDesc) return false;
      if (UserNumber != other.UserNumber) return false;
      if (UserDesc != other.UserDesc) return false;
      if (PaperNumber != other.PaperNumber) return false;
      if (PaperDesc != other.PaperDesc) return false;
      if (ExamNumber != other.ExamNumber) return false;
      if (ExamDesc != other.ExamDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QuesNumber != 0) hash ^= QuesNumber.GetHashCode();
      if (QuesDesc.Length != 0) hash ^= QuesDesc.GetHashCode();
      if (UserNumber != 0) hash ^= UserNumber.GetHashCode();
      if (UserDesc.Length != 0) hash ^= UserDesc.GetHashCode();
      if (PaperNumber != 0) hash ^= PaperNumber.GetHashCode();
      if (PaperDesc.Length != 0) hash ^= PaperDesc.GetHashCode();
      if (ExamNumber != 0) hash ^= ExamNumber.GetHashCode();
      if (ExamDesc.Length != 0) hash ^= ExamDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuesNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(QuesNumber);
      }
      if (QuesDesc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuesDesc);
      }
      if (UserNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserNumber);
      }
      if (UserDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserDesc);
      }
      if (PaperNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PaperNumber);
      }
      if (PaperDesc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaperDesc);
      }
      if (ExamNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExamNumber);
      }
      if (ExamDesc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ExamDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuesNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuesNumber);
      }
      if (QuesDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuesDesc);
      }
      if (UserNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserNumber);
      }
      if (UserDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDesc);
      }
      if (PaperNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaperNumber);
      }
      if (PaperDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaperDesc);
      }
      if (ExamNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExamNumber);
      }
      if (ExamDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExamDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExamBaseInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.QuesNumber != 0) {
        QuesNumber = other.QuesNumber;
      }
      if (other.QuesDesc.Length != 0) {
        QuesDesc = other.QuesDesc;
      }
      if (other.UserNumber != 0) {
        UserNumber = other.UserNumber;
      }
      if (other.UserDesc.Length != 0) {
        UserDesc = other.UserDesc;
      }
      if (other.PaperNumber != 0) {
        PaperNumber = other.PaperNumber;
      }
      if (other.PaperDesc.Length != 0) {
        PaperDesc = other.PaperDesc;
      }
      if (other.ExamNumber != 0) {
        ExamNumber = other.ExamNumber;
      }
      if (other.ExamDesc.Length != 0) {
        ExamDesc = other.ExamDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QuesNumber = input.ReadInt32();
            break;
          }
          case 18: {
            QuesDesc = input.ReadString();
            break;
          }
          case 24: {
            UserNumber = input.ReadInt32();
            break;
          }
          case 34: {
            UserDesc = input.ReadString();
            break;
          }
          case 40: {
            PaperNumber = input.ReadInt32();
            break;
          }
          case 50: {
            PaperDesc = input.ReadString();
            break;
          }
          case 56: {
            ExamNumber = input.ReadInt32();
            break;
          }
          case 66: {
            ExamDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
