// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LevelInfoReqProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from LevelInfoReqProto.proto</summary>
  public static partial class LevelInfoReqProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for LevelInfoReqProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LevelInfoReqProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdMZXZlbEluZm9SZXFQcm90by5wcm90bxoRQ29tbW9uUHJvdG8ucHJvdG8i",
            "ZQoSSW5zZXJ0TGV2ZWxJbmZvUmVxEg4KBnVzZXJJZBgBIAEoCRISCgpzb2Z0",
            "d2FyZUlkGAIgASgJEg0KBWxldmVsGAMgASgFEgwKBGRhdGEYBCABKAkSDgoG",
            "cmVtYXJrGAUgASgJIiAKEkRlbGV0ZUxldmVsSW5mb1JlcRIKCgJpZBgBIAEo",
            "CSJxChJVcGRhdGVMZXZlbEluZm9SZXESCgoCaWQYASABKAkSDgoGdXNlcklk",
            "GAIgASgJEhIKCnNvZnR3YXJlSWQYAyABKAkSDQoFbGV2ZWwYBCABKAUSDAoE",
            "ZGF0YRgFIAEoCRIOCgZyZW1hcmsYBiABKAkiHQoPR2V0TGV2ZWxJbmZvUmVx",
            "EgoKAmlkGAEgASgJIkQKGkdldExldmVsSW5mb0J5Q29uZGl0aW9uUmVxEiYK",
            "CmNvbmRpdGlvbnMYASADKAsyEi5TcWxDb25kaXRpb25Qcm90byIVChNMaXN0",
            "QWxsTGV2ZWxJbmZvUmVxIkUKG0xpc3RMZXZlbEluZm9CeUNvbmRpdGlvblJl",
            "cRImCgpjb25kaXRpb25zGAEgAygLMhIuU3FsQ29uZGl0aW9uUHJvdG8iEwoR",
            "Q291bnRMZXZlbEluZm9SZXEiOQoQUGFnZUxldmVsSW5mb1JlcRITCgtjdXJy",
            "ZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBSJGChxDb3VudExldmVs",
            "SW5mb0J5Q29uZGl0aW9uUmVxEiYKCmNvbmRpdGlvbnMYASADKAsyEi5TcWxD",
            "b25kaXRpb25Qcm90byJsChtQYWdlTGV2ZWxJbmZvQnlDb25kaXRpb25SZXES",
            "EwoLY3VycmVudFBhZ2UYASABKAUSEAoIcGFnZVNpemUYAiABKAUSJgoKY29u",
            "ZGl0aW9ucxgDIAMoCzISLlNxbENvbmRpdGlvblByb3RvIkgKF0JhdGNoSW5z",
            "ZXJ0TGV2ZWxJbmZvUmVxEi0KEEluc2VydExldmVsSW5mb3MYASADKAsyEy5J",
            "bnNlcnRMZXZlbEluZm9SZXEiJgoXQmF0Y2hEZWxldGVMZXZlbEluZm9SZXES",
            "CwoDaWRzGAEgAygJQjwKFGNuLmNvbS54ei5wcm90by5leGFtQhFMZXZlbElu",
            "Zm9SZXFQcm90b6oCEFhGcmFtZXdvcmsuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::XFramework.Proto.CommonProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertLevelInfoReq), global::XFramework.Proto.InsertLevelInfoReq.Parser, new[]{ "UserId", "SoftwareId", "Level", "Data", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteLevelInfoReq), global::XFramework.Proto.DeleteLevelInfoReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateLevelInfoReq), global::XFramework.Proto.UpdateLevelInfoReq.Parser, new[]{ "Id", "UserId", "SoftwareId", "Level", "Data", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetLevelInfoReq), global::XFramework.Proto.GetLevelInfoReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetLevelInfoByConditionReq), global::XFramework.Proto.GetLevelInfoByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllLevelInfoReq), global::XFramework.Proto.ListAllLevelInfoReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListLevelInfoByConditionReq), global::XFramework.Proto.ListLevelInfoByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountLevelInfoReq), global::XFramework.Proto.CountLevelInfoReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageLevelInfoReq), global::XFramework.Proto.PageLevelInfoReq.Parser, new[]{ "CurrentPage", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountLevelInfoByConditionReq), global::XFramework.Proto.CountLevelInfoByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageLevelInfoByConditionReq), global::XFramework.Proto.PageLevelInfoByConditionReq.Parser, new[]{ "CurrentPage", "PageSize", "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertLevelInfoReq), global::XFramework.Proto.BatchInsertLevelInfoReq.Parser, new[]{ "InsertLevelInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteLevelInfoReq), global::XFramework.Proto.BatchDeleteLevelInfoReq.Parser, new[]{ "Ids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The request of add levelInfo
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertLevelInfoReq : pb::IMessage<InsertLevelInfoReq> {
    private static readonly pb::MessageParser<InsertLevelInfoReq> _parser = new pb::MessageParser<InsertLevelInfoReq>(() => new InsertLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertLevelInfoReq(InsertLevelInfoReq other) : this() {
      userId_ = other.userId_;
      softwareId_ = other.softwareId_;
      level_ = other.level_;
      data_ = other.data_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertLevelInfoReq Clone() {
      return new InsertLevelInfoReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 2;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///当前关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private string data_ = "";
    /// <summary>
    ///关卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 5;
    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Level != other.Level) return false;
      if (Data != other.Data) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SoftwareId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Data);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertLevelInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            SoftwareId = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadString();
            break;
          }
          case 42: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of delete levelInfo
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteLevelInfoReq : pb::IMessage<DeleteLevelInfoReq> {
    private static readonly pb::MessageParser<DeleteLevelInfoReq> _parser = new pb::MessageParser<DeleteLevelInfoReq>(() => new DeleteLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLevelInfoReq(DeleteLevelInfoReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLevelInfoReq Clone() {
      return new DeleteLevelInfoReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///nullid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteLevelInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of update levelInfo
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateLevelInfoReq : pb::IMessage<UpdateLevelInfoReq> {
    private static readonly pb::MessageParser<UpdateLevelInfoReq> _parser = new pb::MessageParser<UpdateLevelInfoReq>(() => new UpdateLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLevelInfoReq(UpdateLevelInfoReq other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      softwareId_ = other.softwareId_;
      level_ = other.level_;
      data_ = other.data_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLevelInfoReq Clone() {
      return new UpdateLevelInfoReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///当前关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private string data_ = "";
    /// <summary>
    ///关卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 6;
    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Level != other.Level) return false;
      if (Data != other.Data) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Data);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLevelInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 42: {
            Data = input.ReadString();
            break;
          }
          case 50: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get levelInfo by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetLevelInfoReq : pb::IMessage<GetLevelInfoReq> {
    private static readonly pb::MessageParser<GetLevelInfoReq> _parser = new pb::MessageParser<GetLevelInfoReq>(() => new GetLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoReq(GetLevelInfoReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoReq Clone() {
      return new GetLevelInfoReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///nullid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLevelInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get levelInfo by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetLevelInfoByConditionReq : pb::IMessage<GetLevelInfoByConditionReq> {
    private static readonly pb::MessageParser<GetLevelInfoByConditionReq> _parser = new pb::MessageParser<GetLevelInfoByConditionReq>(() => new GetLevelInfoByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLevelInfoByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoByConditionReq(GetLevelInfoByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLevelInfoByConditionReq Clone() {
      return new GetLevelInfoByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLevelInfoByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLevelInfoByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLevelInfoByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of list all levelInfo
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListAllLevelInfoReq : pb::IMessage<ListAllLevelInfoReq> {
    private static readonly pb::MessageParser<ListAllLevelInfoReq> _parser = new pb::MessageParser<ListAllLevelInfoReq>(() => new ListAllLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllLevelInfoReq(ListAllLevelInfoReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllLevelInfoReq Clone() {
      return new ListAllLevelInfoReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllLevelInfoReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of list levelInfo by condition
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class ListLevelInfoByConditionReq : pb::IMessage<ListLevelInfoByConditionReq> {
    private static readonly pb::MessageParser<ListLevelInfoByConditionReq> _parser = new pb::MessageParser<ListLevelInfoByConditionReq>(() => new ListLevelInfoByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLevelInfoByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLevelInfoByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLevelInfoByConditionReq(ListLevelInfoByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLevelInfoByConditionReq Clone() {
      return new ListLevelInfoByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLevelInfoByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLevelInfoByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLevelInfoByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count levelInfo
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class CountLevelInfoReq : pb::IMessage<CountLevelInfoReq> {
    private static readonly pb::MessageParser<CountLevelInfoReq> _parser = new pb::MessageParser<CountLevelInfoReq>(() => new CountLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoReq(CountLevelInfoReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoReq Clone() {
      return new CountLevelInfoReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountLevelInfoReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of page levelInfo
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class PageLevelInfoReq : pb::IMessage<PageLevelInfoReq> {
    private static readonly pb::MessageParser<PageLevelInfoReq> _parser = new pb::MessageParser<PageLevelInfoReq>(() => new PageLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoReq(PageLevelInfoReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoReq Clone() {
      return new PageLevelInfoReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageLevelInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count levelInfo by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class CountLevelInfoByConditionReq : pb::IMessage<CountLevelInfoByConditionReq> {
    private static readonly pb::MessageParser<CountLevelInfoByConditionReq> _parser = new pb::MessageParser<CountLevelInfoByConditionReq>(() => new CountLevelInfoByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountLevelInfoByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoByConditionReq(CountLevelInfoByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountLevelInfoByConditionReq Clone() {
      return new CountLevelInfoByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountLevelInfoByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountLevelInfoByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountLevelInfoByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of page levelInfo by condition
  ///commandId = 0x00*B
  /// </summary>
  public sealed partial class PageLevelInfoByConditionReq : pb::IMessage<PageLevelInfoByConditionReq> {
    private static readonly pb::MessageParser<PageLevelInfoByConditionReq> _parser = new pb::MessageParser<PageLevelInfoByConditionReq>(() => new PageLevelInfoByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageLevelInfoByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoByConditionReq(PageLevelInfoByConditionReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageLevelInfoByConditionReq Clone() {
      return new PageLevelInfoByConditionReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(26, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageLevelInfoByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageLevelInfoByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageLevelInfoByConditionReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch insert levelInfo
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertLevelInfoReq : pb::IMessage<BatchInsertLevelInfoReq> {
    private static readonly pb::MessageParser<BatchInsertLevelInfoReq> _parser = new pb::MessageParser<BatchInsertLevelInfoReq>(() => new BatchInsertLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertLevelInfoReq(BatchInsertLevelInfoReq other) : this() {
      insertLevelInfos_ = other.insertLevelInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertLevelInfoReq Clone() {
      return new BatchInsertLevelInfoReq(this);
    }

    /// <summary>Field number for the "InsertLevelInfos" field.</summary>
    public const int InsertLevelInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.InsertLevelInfoReq> _repeated_insertLevelInfos_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.InsertLevelInfoReq.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.InsertLevelInfoReq> insertLevelInfos_ = new pbc::RepeatedField<global::XFramework.Proto.InsertLevelInfoReq>();
    /// <summary>
    ///nullitems
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.InsertLevelInfoReq> InsertLevelInfos {
      get { return insertLevelInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!insertLevelInfos_.Equals(other.insertLevelInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= insertLevelInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      insertLevelInfos_.WriteTo(output, _repeated_insertLevelInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += insertLevelInfos_.CalculateSize(_repeated_insertLevelInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertLevelInfoReq other) {
      if (other == null) {
        return;
      }
      insertLevelInfos_.Add(other.insertLevelInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            insertLevelInfos_.AddEntriesFrom(input, _repeated_insertLevelInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch delete levelInfo
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteLevelInfoReq : pb::IMessage<BatchDeleteLevelInfoReq> {
    private static readonly pb::MessageParser<BatchDeleteLevelInfoReq> _parser = new pb::MessageParser<BatchDeleteLevelInfoReq>(() => new BatchDeleteLevelInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteLevelInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.LevelInfoReqProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteLevelInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteLevelInfoReq(BatchDeleteLevelInfoReq other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteLevelInfoReq Clone() {
      return new BatchDeleteLevelInfoReq(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///nullitems
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteLevelInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteLevelInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteLevelInfoReq other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
