// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmpiricalDataRecordRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from EmpiricalDataRecordRespProto.proto</summary>
  public static partial class EmpiricalDataRecordRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for EmpiricalDataRecordRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EmpiricalDataRecordRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJFbXBpcmljYWxEYXRhUmVjb3JkUmVzcFByb3RvLnByb3RvIkwKHUluc2Vy",
            "dEVtcGlyaWNhbERhdGFSZWNvcmRSZXNwEg8KB3N1Y2Nlc3MYASABKAgSCgoC",
            "aWQYAiABKAkSDgoGZGV0YWlsGAMgASgJIkAKHURlbGV0ZUVtcGlyaWNhbERh",
            "dGFSZWNvcmRSZXNwEg8KB3N1Y2Nlc3MYASABKAgSDgoGZGV0YWlsGAIgASgJ",
            "IkAKHVVwZGF0ZUVtcGlyaWNhbERhdGFSZWNvcmRSZXNwEg8KB3N1Y2Nlc3MY",
            "ASABKAgSDgoGZGV0YWlsGAIgASgJIlQKGkdldEVtcGlyaWNhbERhdGFSZWNv",
            "cmRSZXNwEjYKE2VtcGlyaWNhbERhdGFSZWNvcmQYASABKAsyGS5FbXBpcmlj",
            "YWxEYXRhUmVjb3JkUHJvdG8iXwolR2V0RW1waXJpY2FsRGF0YVJlY29yZEJ5",
            "Q29uZGl0aW9uUmVzcBI2ChNlbXBpcmljYWxEYXRhUmVjb3JkGAEgASgLMhku",
            "RW1waXJpY2FsRGF0YVJlY29yZFByb3RvIlkKHkxpc3RBbGxFbXBpcmljYWxE",
            "YXRhUmVjb3JkUmVzcBI3ChRlbXBpcmljYWxEYXRhUmVjb3JkcxgBIAMoCzIZ",
            "LkVtcGlyaWNhbERhdGFSZWNvcmRQcm90byJhCiZMaXN0RW1waXJpY2FsRGF0",
            "YVJlY29yZEJ5Q29uZGl0aW9uUmVzcBI3ChRlbXBpcmljYWxEYXRhUmVjb3Jk",
            "cxgBIAMoCzIZLkVtcGlyaWNhbERhdGFSZWNvcmRQcm90byItChxDb3VudEVt",
            "cGlyaWNhbERhdGFSZWNvcmRSZXNwEg0KBWNvdW50GAEgASgFIqcBChtQYWdl",
            "RW1waXJpY2FsRGF0YVJlY29yZFJlc3ASEwoLY3VycmVudFBhZ2UYASABKAUS",
            "EAoIcGFnZVNpemUYAiABKAUSFAoMdG90YWxSZWNvcmRzGAMgASgFEhIKCnRv",
            "dGFsUGFnZXMYBCABKAUSNwoUZW1waXJpY2FsRGF0YVJlY29yZHMYBSADKAsy",
            "GS5FbXBpcmljYWxEYXRhUmVjb3JkUHJvdG8iOAonQ291bnRFbXBpcmljYWxE",
            "YXRhUmVjb3JkQnlDb25kaXRpb25SZXNwEg0KBWNvdW50GAEgASgFIrIBCiZQ",
            "YWdlRW1waXJpY2FsRGF0YVJlY29yZEJ5Q29uZGl0aW9uUmVzcBITCgtjdXJy",
            "ZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIUCgx0b3RhbFJlY29y",
            "ZHMYAyABKAUSEgoKdG90YWxQYWdlcxgEIAEoBRI3ChRlbXBpcmljYWxEYXRh",
            "UmVjb3JkcxgFIAMoCzIZLkVtcGlyaWNhbERhdGFSZWNvcmRQcm90byI5CiJC",
            "YXRjaEluc2VydEVtcGlyaWNhbERhdGFSZWNvcmRSZXNwEhMKC2JhdGNoUmVz",
            "dWx0GAEgASgJIjkKIkJhdGNoRGVsZXRlRW1waXJpY2FsRGF0YVJlY29yZFJl",
            "c3ASEwoLYmF0Y2hSZXN1bHQYASABKAkitQEKGEVtcGlyaWNhbERhdGFSZWNv",
            "cmRQcm90bxIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhAKCHJlYWxOYW1l",
            "GAMgASgJEg4KBnVzZXJJZBgEIAEoCRISCgpzb2Z0d2FyZUlkGAUgASgJEhIK",
            "CmNyZWF0ZVRpbWUYBiABKAMSEgoKdXBkYXRlVGltZRgHIAEoAxIMCgRkYXRh",
            "GAggASgJEhMKC2Rlc2NyaXB0aW9uGAkgASgJQkYKE2NuLmNvbS54ei5wcm90",
            "by5sb2dCHEVtcGlyaWNhbERhdGFSZWNvcmRSZXNwUHJvdG+qAhBYRnJhbWV3",
            "b3JrLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertEmpiricalDataRecordResp), global::XFramework.Proto.InsertEmpiricalDataRecordResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteEmpiricalDataRecordResp), global::XFramework.Proto.DeleteEmpiricalDataRecordResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateEmpiricalDataRecordResp), global::XFramework.Proto.UpdateEmpiricalDataRecordResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetEmpiricalDataRecordResp), global::XFramework.Proto.GetEmpiricalDataRecordResp.Parser, new[]{ "EmpiricalDataRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetEmpiricalDataRecordByConditionResp), global::XFramework.Proto.GetEmpiricalDataRecordByConditionResp.Parser, new[]{ "EmpiricalDataRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllEmpiricalDataRecordResp), global::XFramework.Proto.ListAllEmpiricalDataRecordResp.Parser, new[]{ "EmpiricalDataRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListEmpiricalDataRecordByConditionResp), global::XFramework.Proto.ListEmpiricalDataRecordByConditionResp.Parser, new[]{ "EmpiricalDataRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountEmpiricalDataRecordResp), global::XFramework.Proto.CountEmpiricalDataRecordResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageEmpiricalDataRecordResp), global::XFramework.Proto.PageEmpiricalDataRecordResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "EmpiricalDataRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountEmpiricalDataRecordByConditionResp), global::XFramework.Proto.CountEmpiricalDataRecordByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageEmpiricalDataRecordByConditionResp), global::XFramework.Proto.PageEmpiricalDataRecordByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "EmpiricalDataRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertEmpiricalDataRecordResp), global::XFramework.Proto.BatchInsertEmpiricalDataRecordResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteEmpiricalDataRecordResp), global::XFramework.Proto.BatchDeleteEmpiricalDataRecordResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.EmpiricalDataRecordProto), global::XFramework.Proto.EmpiricalDataRecordProto.Parser, new[]{ "Id", "Name", "RealName", "UserId", "SoftwareId", "CreateTime", "UpdateTime", "Data", "Description" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add empiricalDataRecord
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertEmpiricalDataRecordResp : pb::IMessage<InsertEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<InsertEmpiricalDataRecordResp> _parser = new pb::MessageParser<InsertEmpiricalDataRecordResp>(() => new InsertEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEmpiricalDataRecordResp(InsertEmpiricalDataRecordResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEmpiricalDataRecordResp Clone() {
      return new InsertEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete empiricalDataRecord
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteEmpiricalDataRecordResp : pb::IMessage<DeleteEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<DeleteEmpiricalDataRecordResp> _parser = new pb::MessageParser<DeleteEmpiricalDataRecordResp>(() => new DeleteEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEmpiricalDataRecordResp(DeleteEmpiricalDataRecordResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEmpiricalDataRecordResp Clone() {
      return new DeleteEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update empiricalDataRecord
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateEmpiricalDataRecordResp : pb::IMessage<UpdateEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<UpdateEmpiricalDataRecordResp> _parser = new pb::MessageParser<UpdateEmpiricalDataRecordResp>(() => new UpdateEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEmpiricalDataRecordResp(UpdateEmpiricalDataRecordResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEmpiricalDataRecordResp Clone() {
      return new UpdateEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get empiricalDataRecord by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetEmpiricalDataRecordResp : pb::IMessage<GetEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<GetEmpiricalDataRecordResp> _parser = new pb::MessageParser<GetEmpiricalDataRecordResp>(() => new GetEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordResp(GetEmpiricalDataRecordResp other) : this() {
      EmpiricalDataRecord = other.empiricalDataRecord_ != null ? other.EmpiricalDataRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordResp Clone() {
      return new GetEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "empiricalDataRecord" field.</summary>
    public const int EmpiricalDataRecordFieldNumber = 1;
    private global::XFramework.Proto.EmpiricalDataRecordProto empiricalDataRecord_;
    /// <summary>
    ///实验数据记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.EmpiricalDataRecordProto EmpiricalDataRecord {
      get { return empiricalDataRecord_; }
      set {
        empiricalDataRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EmpiricalDataRecord, other.EmpiricalDataRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (empiricalDataRecord_ != null) hash ^= EmpiricalDataRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (empiricalDataRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EmpiricalDataRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (empiricalDataRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmpiricalDataRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.empiricalDataRecord_ != null) {
        if (empiricalDataRecord_ == null) {
          empiricalDataRecord_ = new global::XFramework.Proto.EmpiricalDataRecordProto();
        }
        EmpiricalDataRecord.MergeFrom(other.EmpiricalDataRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (empiricalDataRecord_ == null) {
              empiricalDataRecord_ = new global::XFramework.Proto.EmpiricalDataRecordProto();
            }
            input.ReadMessage(empiricalDataRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get empiricalDataRecord by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetEmpiricalDataRecordByConditionResp : pb::IMessage<GetEmpiricalDataRecordByConditionResp> {
    private static readonly pb::MessageParser<GetEmpiricalDataRecordByConditionResp> _parser = new pb::MessageParser<GetEmpiricalDataRecordByConditionResp>(() => new GetEmpiricalDataRecordByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmpiricalDataRecordByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordByConditionResp(GetEmpiricalDataRecordByConditionResp other) : this() {
      EmpiricalDataRecord = other.empiricalDataRecord_ != null ? other.EmpiricalDataRecord.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmpiricalDataRecordByConditionResp Clone() {
      return new GetEmpiricalDataRecordByConditionResp(this);
    }

    /// <summary>Field number for the "empiricalDataRecord" field.</summary>
    public const int EmpiricalDataRecordFieldNumber = 1;
    private global::XFramework.Proto.EmpiricalDataRecordProto empiricalDataRecord_;
    /// <summary>
    ///实验数据记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.EmpiricalDataRecordProto EmpiricalDataRecord {
      get { return empiricalDataRecord_; }
      set {
        empiricalDataRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmpiricalDataRecordByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmpiricalDataRecordByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EmpiricalDataRecord, other.EmpiricalDataRecord)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (empiricalDataRecord_ != null) hash ^= EmpiricalDataRecord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (empiricalDataRecord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EmpiricalDataRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (empiricalDataRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmpiricalDataRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmpiricalDataRecordByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.empiricalDataRecord_ != null) {
        if (empiricalDataRecord_ == null) {
          empiricalDataRecord_ = new global::XFramework.Proto.EmpiricalDataRecordProto();
        }
        EmpiricalDataRecord.MergeFrom(other.EmpiricalDataRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (empiricalDataRecord_ == null) {
              empiricalDataRecord_ = new global::XFramework.Proto.EmpiricalDataRecordProto();
            }
            input.ReadMessage(empiricalDataRecord_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all empiricalDataRecord
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllEmpiricalDataRecordResp : pb::IMessage<ListAllEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<ListAllEmpiricalDataRecordResp> _parser = new pb::MessageParser<ListAllEmpiricalDataRecordResp>(() => new ListAllEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllEmpiricalDataRecordResp(ListAllEmpiricalDataRecordResp other) : this() {
      empiricalDataRecords_ = other.empiricalDataRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllEmpiricalDataRecordResp Clone() {
      return new ListAllEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "empiricalDataRecords" field.</summary>
    public const int EmpiricalDataRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.EmpiricalDataRecordProto> _repeated_empiricalDataRecords_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.EmpiricalDataRecordProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> empiricalDataRecords_ = new pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto>();
    /// <summary>
    ///The list of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> EmpiricalDataRecords {
      get { return empiricalDataRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!empiricalDataRecords_.Equals(other.empiricalDataRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= empiricalDataRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      empiricalDataRecords_.WriteTo(output, _repeated_empiricalDataRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += empiricalDataRecords_.CalculateSize(_repeated_empiricalDataRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      empiricalDataRecords_.Add(other.empiricalDataRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            empiricalDataRecords_.AddEntriesFrom(input, _repeated_empiricalDataRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list empiricalDataRecord by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListEmpiricalDataRecordByConditionResp : pb::IMessage<ListEmpiricalDataRecordByConditionResp> {
    private static readonly pb::MessageParser<ListEmpiricalDataRecordByConditionResp> _parser = new pb::MessageParser<ListEmpiricalDataRecordByConditionResp>(() => new ListEmpiricalDataRecordByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListEmpiricalDataRecordByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEmpiricalDataRecordByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEmpiricalDataRecordByConditionResp(ListEmpiricalDataRecordByConditionResp other) : this() {
      empiricalDataRecords_ = other.empiricalDataRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEmpiricalDataRecordByConditionResp Clone() {
      return new ListEmpiricalDataRecordByConditionResp(this);
    }

    /// <summary>Field number for the "empiricalDataRecords" field.</summary>
    public const int EmpiricalDataRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.EmpiricalDataRecordProto> _repeated_empiricalDataRecords_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.EmpiricalDataRecordProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> empiricalDataRecords_ = new pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto>();
    /// <summary>
    ///The list of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> EmpiricalDataRecords {
      get { return empiricalDataRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListEmpiricalDataRecordByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListEmpiricalDataRecordByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!empiricalDataRecords_.Equals(other.empiricalDataRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= empiricalDataRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      empiricalDataRecords_.WriteTo(output, _repeated_empiricalDataRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += empiricalDataRecords_.CalculateSize(_repeated_empiricalDataRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListEmpiricalDataRecordByConditionResp other) {
      if (other == null) {
        return;
      }
      empiricalDataRecords_.Add(other.empiricalDataRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            empiricalDataRecords_.AddEntriesFrom(input, _repeated_empiricalDataRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count empiricalDataRecord
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountEmpiricalDataRecordResp : pb::IMessage<CountEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<CountEmpiricalDataRecordResp> _parser = new pb::MessageParser<CountEmpiricalDataRecordResp>(() => new CountEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordResp(CountEmpiricalDataRecordResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordResp Clone() {
      return new CountEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page empiricalDataRecord
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PageEmpiricalDataRecordResp : pb::IMessage<PageEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<PageEmpiricalDataRecordResp> _parser = new pb::MessageParser<PageEmpiricalDataRecordResp>(() => new PageEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordResp(PageEmpiricalDataRecordResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      empiricalDataRecords_ = other.empiricalDataRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordResp Clone() {
      return new PageEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "empiricalDataRecords" field.</summary>
    public const int EmpiricalDataRecordsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.EmpiricalDataRecordProto> _repeated_empiricalDataRecords_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.EmpiricalDataRecordProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> empiricalDataRecords_ = new pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto>();
    /// <summary>
    ///The list of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> EmpiricalDataRecords {
      get { return empiricalDataRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!empiricalDataRecords_.Equals(other.empiricalDataRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= empiricalDataRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      empiricalDataRecords_.WriteTo(output, _repeated_empiricalDataRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += empiricalDataRecords_.CalculateSize(_repeated_empiricalDataRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      empiricalDataRecords_.Add(other.empiricalDataRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            empiricalDataRecords_.AddEntriesFrom(input, _repeated_empiricalDataRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count empiricalDataRecord by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountEmpiricalDataRecordByConditionResp : pb::IMessage<CountEmpiricalDataRecordByConditionResp> {
    private static readonly pb::MessageParser<CountEmpiricalDataRecordByConditionResp> _parser = new pb::MessageParser<CountEmpiricalDataRecordByConditionResp>(() => new CountEmpiricalDataRecordByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountEmpiricalDataRecordByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordByConditionResp(CountEmpiricalDataRecordByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountEmpiricalDataRecordByConditionResp Clone() {
      return new CountEmpiricalDataRecordByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountEmpiricalDataRecordByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountEmpiricalDataRecordByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountEmpiricalDataRecordByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page empiricalDataRecord by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PageEmpiricalDataRecordByConditionResp : pb::IMessage<PageEmpiricalDataRecordByConditionResp> {
    private static readonly pb::MessageParser<PageEmpiricalDataRecordByConditionResp> _parser = new pb::MessageParser<PageEmpiricalDataRecordByConditionResp>(() => new PageEmpiricalDataRecordByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageEmpiricalDataRecordByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordByConditionResp(PageEmpiricalDataRecordByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      empiricalDataRecords_ = other.empiricalDataRecords_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageEmpiricalDataRecordByConditionResp Clone() {
      return new PageEmpiricalDataRecordByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "empiricalDataRecords" field.</summary>
    public const int EmpiricalDataRecordsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.EmpiricalDataRecordProto> _repeated_empiricalDataRecords_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.EmpiricalDataRecordProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> empiricalDataRecords_ = new pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto>();
    /// <summary>
    ///The list of empiricalDataRecord
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.EmpiricalDataRecordProto> EmpiricalDataRecords {
      get { return empiricalDataRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageEmpiricalDataRecordByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageEmpiricalDataRecordByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!empiricalDataRecords_.Equals(other.empiricalDataRecords_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= empiricalDataRecords_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      empiricalDataRecords_.WriteTo(output, _repeated_empiricalDataRecords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += empiricalDataRecords_.CalculateSize(_repeated_empiricalDataRecords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageEmpiricalDataRecordByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      empiricalDataRecords_.Add(other.empiricalDataRecords_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            empiricalDataRecords_.AddEntriesFrom(input, _repeated_empiricalDataRecords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert empiricalDataRecord
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertEmpiricalDataRecordResp : pb::IMessage<BatchInsertEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<BatchInsertEmpiricalDataRecordResp> _parser = new pb::MessageParser<BatchInsertEmpiricalDataRecordResp>(() => new BatchInsertEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertEmpiricalDataRecordResp(BatchInsertEmpiricalDataRecordResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertEmpiricalDataRecordResp Clone() {
      return new BatchInsertEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加实验数据记录的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete empiricalDataRecord
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteEmpiricalDataRecordResp : pb::IMessage<BatchDeleteEmpiricalDataRecordResp> {
    private static readonly pb::MessageParser<BatchDeleteEmpiricalDataRecordResp> _parser = new pb::MessageParser<BatchDeleteEmpiricalDataRecordResp>(() => new BatchDeleteEmpiricalDataRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteEmpiricalDataRecordResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteEmpiricalDataRecordResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteEmpiricalDataRecordResp(BatchDeleteEmpiricalDataRecordResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteEmpiricalDataRecordResp Clone() {
      return new BatchDeleteEmpiricalDataRecordResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除实验数据记录的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteEmpiricalDataRecordResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteEmpiricalDataRecordResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteEmpiricalDataRecordResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///实验数据记录
  /// </summary>
  public sealed partial class EmpiricalDataRecordProto : pb::IMessage<EmpiricalDataRecordProto> {
    private static readonly pb::MessageParser<EmpiricalDataRecordProto> _parser = new pb::MessageParser<EmpiricalDataRecordProto>(() => new EmpiricalDataRecordProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmpiricalDataRecordProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.EmpiricalDataRecordRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmpiricalDataRecordProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmpiricalDataRecordProto(EmpiricalDataRecordProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      realName_ = other.realName_;
      userId_ = other.userId_;
      softwareId_ = other.softwareId_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
      data_ = other.data_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmpiricalDataRecordProto Clone() {
      return new EmpiricalDataRecordProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///模块细节 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 3;
    private string realName_ = "";
    /// <summary>
    ///实验中文名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private string userId_ = "";
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 5;
    private string softwareId_ = "";
    /// <summary>
    ///软件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private long updateTime_;
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private string data_ = "";
    /// <summary>
    ///用户操作数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 9;
    private string description_ = "";
    /// <summary>
    ///操作内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmpiricalDataRecordProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmpiricalDataRecordProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (RealName != other.RealName) return false;
      if (UserId != other.UserId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (Data != other.Data) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RealName);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SoftwareId);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreateTime);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UpdateTime);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Data);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmpiricalDataRecordProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            RealName = input.ReadString();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
          case 42: {
            SoftwareId = input.ReadString();
            break;
          }
          case 48: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 56: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 66: {
            Data = input.ReadString();
            break;
          }
          case 74: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
