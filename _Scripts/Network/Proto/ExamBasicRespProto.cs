// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExamBasicRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from ExamBasicRespProto.proto</summary>
  public static partial class ExamBasicRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for ExamBasicRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExamBasicRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhFeGFtQmFzaWNSZXNwUHJvdG8ucHJvdG8irAEKEEdldFN0YXRzSW5mb1Jl",
            "c3ASEgoKcXVlc051bWJlchgBIAEoBRIQCghxdWVzRGVzYxgCIAEoCRISCgp1",
            "c2VyTnVtYmVyGAMgASgFEhAKCHVzZXJEZXNjGAQgASgJEhMKC3BhcGVyTnVt",
            "YmVyGAUgASgFEhEKCXBhcGVyRGVzYxgGIAEoCRISCgpleGFtTnVtYmVyGAcg",
            "ASgFEhAKCGV4YW1EZXNjGAggASgJIjYKEEdldEV4YW1QYXBlclJlc3ASIgoJ",
            "ZXhhbVBhcGVyGAEgASgLMg8uRXhhbVBhcGVyUHJvdG8iNQoSTGlzdExhdGVs",
            "eUV4YW1SZXNwEh8KBWV4YW1zGAEgAygLMhAuTGF0ZWx5RXhhbVByb3RvInoK",
            "EEV4YW1BbmFseXNpc1Jlc3ASIgoJc2NvcmVGb3JtGAEgASgLMg8uU2NvcmVG",
            "b3JtUHJvdG8SIAoIdXNlckZvcm0YAiABKAsyDi5Vc2VyRm9ybVByb3RvEiAK",
            "CHRpbWVGb3JtGAMgASgLMg4uVGltZUZvcm1Qcm90byI4ChFTY29yZUFuYWx5",
            "c2lzUmVzcBIjCgpyYW5nZVJhdGVzGAEgAygLMg8uUmFuZ2VSYXRlUHJvdG8i",
            "vQEKD0xhdGVseUV4YW1Qcm90bxIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJ",
            "Eg8KB3BhcGVySWQYAyABKAkSEgoKY2F0ZWdvcnlJZBgEIAEoCRIOCgZzdGF0",
            "dXMYBSABKAUSEAoIZHVyYXRpb24YBiABKAUSEQoJc3RhcnRUaW1lGAcgASgD",
            "Eg8KB2VuZFRpbWUYCCABKAMSEgoKdG90YWxTY29yZRgJIAEoBRIRCglwYXNz",
            "U2NvcmUYCiABKAUiwwEKDkV4YW1QYXBlclByb3RvEgoKAmlkGAEgASgJEgwK",
            "BG5hbWUYAiABKAkSEgoKc29mdHdhcmVJZBgDIAEoCRISCgpjYXRlZ29yeUlk",
            "GAQgASgJEg4KBnN0YXR1cxgFIAEoBRISCgp0b3RhbFNjb3JlGAYgASgFEhEK",
            "CXBhc3NTY29yZRgHIAEoBRIOCgZyZW1hcmsYCCABKAkSKAoIc2VjdGlvbnMY",
            "CSADKAsyFi5FeGFtUGFwZXJTZWN0aW9uUHJvdG8ilgEKFUV4YW1QYXBlclNl",
            "Y3Rpb25Qcm90bxIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEg4KBnJlbWFy",
            "axgDIAEoCRINCgVxVHlwZRgEIAEoBRIOCgZudW1iZXIYBSABKAUSDQoFc2Nv",
            "cmUYBiABKAUSJQoJcXVlc3Rpb25zGAcgAygLMhIuRXhhbVF1ZXN0aW9uUHJv",
            "dG8ipwEKEUV4YW1RdWVzdGlvblByb3RvEgoKAmlkGAEgASgJEg4KBmJhbmtJ",
            "ZBgCIAEoCRIMCgR0eXBlGAMgASgFEg0KBWxldmVsGAQgASgFEgwKBGZyb20Y",
            "BSABKAkSDgoGc3RhdHVzGAYgASgFEg8KB2NvbnRlbnQYByABKAkSCwoDa2V5",
            "GAggASgJEg8KB3Jlc29sdmUYCSABKAkSDAoEZGF0YRgKIAEoCSI7Cg5TY29y",
            "ZUZvcm1Qcm90bxILCgNtYXgYASABKAkSCwoDbWluGAIgASgJEg8KB2F2ZXJh",
            "Z2UYAyABKAkiiwEKDVVzZXJGb3JtUHJvdG8SEgoKcGFzc051bWJlchgBIAEo",
            "BRIQCghwYXNzUmF0ZRgCIAEoAhIUCgxzaG91bGROdW1iZXIYAyABKAUSFAoM",
            "YXR0ZW5kTnVtYmVyGAQgASgFEhIKCmF0dGVuZFJhdGUYBSABKAISFAoMYWJz",
            "ZW50TnVtYmVyGAYgASgFIlQKDVRpbWVGb3JtUHJvdG8SEAoIZWFybGllc3QY",
            "ASABKAkSDgoGbGF0ZXN0GAIgASgJEg8KB2xvbmdlc3QYAyABKAkSEAoIc2hv",
            "cnRlc3QYBCABKAkiPQoOUmFuZ2VSYXRlUHJvdG8SDQoFaW5kZXgYASABKAUS",
            "DgoGbnVtYmVyGAIgASgFEgwKBHJhdGUYAyABKAJCQgoZY24uY29tLnh6LnBy",
            "b3RvLmV4YW1iYXNpY0ISRXhhbUJhc2ljUmVzcFByb3RvqgIQWEZyYW1ld29y",
            "ay5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetStatsInfoResp), global::XFramework.Proto.GetStatsInfoResp.Parser, new[]{ "QuesNumber", "QuesDesc", "UserNumber", "UserDesc", "PaperNumber", "PaperDesc", "ExamNumber", "ExamDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetExamPaperResp), global::XFramework.Proto.GetExamPaperResp.Parser, new[]{ "ExamPaper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListLatelyExamResp), global::XFramework.Proto.ListLatelyExamResp.Parser, new[]{ "Exams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ExamAnalysisResp), global::XFramework.Proto.ExamAnalysisResp.Parser, new[]{ "ScoreForm", "UserForm", "TimeForm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ScoreAnalysisResp), global::XFramework.Proto.ScoreAnalysisResp.Parser, new[]{ "RangeRates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.LatelyExamProto), global::XFramework.Proto.LatelyExamProto.Parser, new[]{ "Id", "Name", "PaperId", "CategoryId", "Status", "Duration", "StartTime", "EndTime", "TotalScore", "PassScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ExamPaperProto), global::XFramework.Proto.ExamPaperProto.Parser, new[]{ "Id", "Name", "SoftwareId", "CategoryId", "Status", "TotalScore", "PassScore", "Remark", "Sections" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ExamPaperSectionProto), global::XFramework.Proto.ExamPaperSectionProto.Parser, new[]{ "Id", "Name", "Remark", "QType", "Number", "Score", "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ExamQuestionProto), global::XFramework.Proto.ExamQuestionProto.Parser, new[]{ "Id", "BankId", "Type", "Level", "From", "Status", "Content", "Key", "Resolve", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ScoreFormProto), global::XFramework.Proto.ScoreFormProto.Parser, new[]{ "Max", "Min", "Average" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UserFormProto), global::XFramework.Proto.UserFormProto.Parser, new[]{ "PassNumber", "PassRate", "ShouldNumber", "AttendNumber", "AttendRate", "AbsentNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.TimeFormProto), global::XFramework.Proto.TimeFormProto.Parser, new[]{ "Earliest", "Latest", "Longest", "Shortest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.RangeRateProto), global::XFramework.Proto.RangeRateProto.Parser, new[]{ "Index", "Number", "Rate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///考试系统基本信息的请求
  ///commandId = 0x00B1
  /// </summary>
  public sealed partial class GetStatsInfoResp : pb::IMessage<GetStatsInfoResp> {
    private static readonly pb::MessageParser<GetStatsInfoResp> _parser = new pb::MessageParser<GetStatsInfoResp>(() => new GetStatsInfoResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatsInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoResp(GetStatsInfoResp other) : this() {
      quesNumber_ = other.quesNumber_;
      quesDesc_ = other.quesDesc_;
      userNumber_ = other.userNumber_;
      userDesc_ = other.userDesc_;
      paperNumber_ = other.paperNumber_;
      paperDesc_ = other.paperDesc_;
      examNumber_ = other.examNumber_;
      examDesc_ = other.examDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoResp Clone() {
      return new GetStatsInfoResp(this);
    }

    /// <summary>Field number for the "quesNumber" field.</summary>
    public const int QuesNumberFieldNumber = 1;
    private int quesNumber_;
    /// <summary>
    ///试题数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuesNumber {
      get { return quesNumber_; }
      set {
        quesNumber_ = value;
      }
    }

    /// <summary>Field number for the "quesDesc" field.</summary>
    public const int QuesDescFieldNumber = 2;
    private string quesDesc_ = "";
    /// <summary>
    ///试题描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuesDesc {
      get { return quesDesc_; }
      set {
        quesDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userNumber" field.</summary>
    public const int UserNumberFieldNumber = 3;
    private int userNumber_;
    /// <summary>
    ///用户数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserNumber {
      get { return userNumber_; }
      set {
        userNumber_ = value;
      }
    }

    /// <summary>Field number for the "userDesc" field.</summary>
    public const int UserDescFieldNumber = 4;
    private string userDesc_ = "";
    /// <summary>
    ///用户描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserDesc {
      get { return userDesc_; }
      set {
        userDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paperNumber" field.</summary>
    public const int PaperNumberFieldNumber = 5;
    private int paperNumber_;
    /// <summary>
    ///试卷数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaperNumber {
      get { return paperNumber_; }
      set {
        paperNumber_ = value;
      }
    }

    /// <summary>Field number for the "paperDesc" field.</summary>
    public const int PaperDescFieldNumber = 6;
    private string paperDesc_ = "";
    /// <summary>
    ///试卷描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaperDesc {
      get { return paperDesc_; }
      set {
        paperDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examNumber" field.</summary>
    public const int ExamNumberFieldNumber = 7;
    private int examNumber_;
    /// <summary>
    ///考试数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExamNumber {
      get { return examNumber_; }
      set {
        examNumber_ = value;
      }
    }

    /// <summary>Field number for the "examDesc" field.</summary>
    public const int ExamDescFieldNumber = 8;
    private string examDesc_ = "";
    /// <summary>
    ///考试描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExamDesc {
      get { return examDesc_; }
      set {
        examDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatsInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatsInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuesNumber != other.QuesNumber) return false;
      if (QuesDesc != other.QuesDesc) return false;
      if (UserNumber != other.UserNumber) return false;
      if (UserDesc != other.UserDesc) return false;
      if (PaperNumber != other.PaperNumber) return false;
      if (PaperDesc != other.PaperDesc) return false;
      if (ExamNumber != other.ExamNumber) return false;
      if (ExamDesc != other.ExamDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QuesNumber != 0) hash ^= QuesNumber.GetHashCode();
      if (QuesDesc.Length != 0) hash ^= QuesDesc.GetHashCode();
      if (UserNumber != 0) hash ^= UserNumber.GetHashCode();
      if (UserDesc.Length != 0) hash ^= UserDesc.GetHashCode();
      if (PaperNumber != 0) hash ^= PaperNumber.GetHashCode();
      if (PaperDesc.Length != 0) hash ^= PaperDesc.GetHashCode();
      if (ExamNumber != 0) hash ^= ExamNumber.GetHashCode();
      if (ExamDesc.Length != 0) hash ^= ExamDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuesNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(QuesNumber);
      }
      if (QuesDesc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuesDesc);
      }
      if (UserNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserNumber);
      }
      if (UserDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserDesc);
      }
      if (PaperNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PaperNumber);
      }
      if (PaperDesc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaperDesc);
      }
      if (ExamNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExamNumber);
      }
      if (ExamDesc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ExamDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuesNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuesNumber);
      }
      if (QuesDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuesDesc);
      }
      if (UserNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserNumber);
      }
      if (UserDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDesc);
      }
      if (PaperNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaperNumber);
      }
      if (PaperDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaperDesc);
      }
      if (ExamNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExamNumber);
      }
      if (ExamDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExamDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatsInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.QuesNumber != 0) {
        QuesNumber = other.QuesNumber;
      }
      if (other.QuesDesc.Length != 0) {
        QuesDesc = other.QuesDesc;
      }
      if (other.UserNumber != 0) {
        UserNumber = other.UserNumber;
      }
      if (other.UserDesc.Length != 0) {
        UserDesc = other.UserDesc;
      }
      if (other.PaperNumber != 0) {
        PaperNumber = other.PaperNumber;
      }
      if (other.PaperDesc.Length != 0) {
        PaperDesc = other.PaperDesc;
      }
      if (other.ExamNumber != 0) {
        ExamNumber = other.ExamNumber;
      }
      if (other.ExamDesc.Length != 0) {
        ExamDesc = other.ExamDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QuesNumber = input.ReadInt32();
            break;
          }
          case 18: {
            QuesDesc = input.ReadString();
            break;
          }
          case 24: {
            UserNumber = input.ReadInt32();
            break;
          }
          case 34: {
            UserDesc = input.ReadString();
            break;
          }
          case 40: {
            PaperNumber = input.ReadInt32();
            break;
          }
          case 50: {
            PaperDesc = input.ReadString();
            break;
          }
          case 56: {
            ExamNumber = input.ReadInt32();
            break;
          }
          case 66: {
            ExamDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取考试试卷的响应
  ///commandId = 0x00B2
  /// </summary>
  public sealed partial class GetExamPaperResp : pb::IMessage<GetExamPaperResp> {
    private static readonly pb::MessageParser<GetExamPaperResp> _parser = new pb::MessageParser<GetExamPaperResp>(() => new GetExamPaperResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExamPaperResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperResp(GetExamPaperResp other) : this() {
      ExamPaper = other.examPaper_ != null ? other.ExamPaper.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperResp Clone() {
      return new GetExamPaperResp(this);
    }

    /// <summary>Field number for the "examPaper" field.</summary>
    public const int ExamPaperFieldNumber = 1;
    private global::XFramework.Proto.ExamPaperProto examPaper_;
    /// <summary>
    ///考试试卷Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.ExamPaperProto ExamPaper {
      get { return examPaper_; }
      set {
        examPaper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExamPaperResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExamPaperResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExamPaper, other.ExamPaper)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (examPaper_ != null) hash ^= ExamPaper.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (examPaper_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExamPaper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (examPaper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExamPaper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExamPaperResp other) {
      if (other == null) {
        return;
      }
      if (other.examPaper_ != null) {
        if (examPaper_ == null) {
          examPaper_ = new global::XFramework.Proto.ExamPaperProto();
        }
        ExamPaper.MergeFrom(other.ExamPaper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (examPaper_ == null) {
              examPaper_ = new global::XFramework.Proto.ExamPaperProto();
            }
            input.ReadMessage(examPaper_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取最近几条考试的响应
  ///commandId = 0x00B3
  /// </summary>
  public sealed partial class ListLatelyExamResp : pb::IMessage<ListLatelyExamResp> {
    private static readonly pb::MessageParser<ListLatelyExamResp> _parser = new pb::MessageParser<ListLatelyExamResp>(() => new ListLatelyExamResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLatelyExamResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamResp(ListLatelyExamResp other) : this() {
      exams_ = other.exams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamResp Clone() {
      return new ListLatelyExamResp(this);
    }

    /// <summary>Field number for the "exams" field.</summary>
    public const int ExamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.LatelyExamProto> _repeated_exams_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.LatelyExamProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.LatelyExamProto> exams_ = new pbc::RepeatedField<global::XFramework.Proto.LatelyExamProto>();
    /// <summary>
    ///考试列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.LatelyExamProto> Exams {
      get { return exams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLatelyExamResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLatelyExamResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exams_.Equals(other.exams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      exams_.WriteTo(output, _repeated_exams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += exams_.CalculateSize(_repeated_exams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLatelyExamResp other) {
      if (other == null) {
        return;
      }
      exams_.Add(other.exams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            exams_.AddEntriesFrom(input, _repeated_exams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///考试分析的响应
  ///commandId = 0x00B4
  /// </summary>
  public sealed partial class ExamAnalysisResp : pb::IMessage<ExamAnalysisResp> {
    private static readonly pb::MessageParser<ExamAnalysisResp> _parser = new pb::MessageParser<ExamAnalysisResp>(() => new ExamAnalysisResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExamAnalysisResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisResp(ExamAnalysisResp other) : this() {
      ScoreForm = other.scoreForm_ != null ? other.ScoreForm.Clone() : null;
      UserForm = other.userForm_ != null ? other.UserForm.Clone() : null;
      TimeForm = other.timeForm_ != null ? other.TimeForm.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisResp Clone() {
      return new ExamAnalysisResp(this);
    }

    /// <summary>Field number for the "scoreForm" field.</summary>
    public const int ScoreFormFieldNumber = 1;
    private global::XFramework.Proto.ScoreFormProto scoreForm_;
    /// <summary>
    ///分数统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.ScoreFormProto ScoreForm {
      get { return scoreForm_; }
      set {
        scoreForm_ = value;
      }
    }

    /// <summary>Field number for the "userForm" field.</summary>
    public const int UserFormFieldNumber = 2;
    private global::XFramework.Proto.UserFormProto userForm_;
    /// <summary>
    ///用户统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.UserFormProto UserForm {
      get { return userForm_; }
      set {
        userForm_ = value;
      }
    }

    /// <summary>Field number for the "timeForm" field.</summary>
    public const int TimeFormFieldNumber = 3;
    private global::XFramework.Proto.TimeFormProto timeForm_;
    /// <summary>
    ///时间统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.TimeFormProto TimeForm {
      get { return timeForm_; }
      set {
        timeForm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExamAnalysisResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExamAnalysisResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ScoreForm, other.ScoreForm)) return false;
      if (!object.Equals(UserForm, other.UserForm)) return false;
      if (!object.Equals(TimeForm, other.TimeForm)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scoreForm_ != null) hash ^= ScoreForm.GetHashCode();
      if (userForm_ != null) hash ^= UserForm.GetHashCode();
      if (timeForm_ != null) hash ^= TimeForm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scoreForm_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ScoreForm);
      }
      if (userForm_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserForm);
      }
      if (timeForm_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeForm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scoreForm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScoreForm);
      }
      if (userForm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserForm);
      }
      if (timeForm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeForm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExamAnalysisResp other) {
      if (other == null) {
        return;
      }
      if (other.scoreForm_ != null) {
        if (scoreForm_ == null) {
          scoreForm_ = new global::XFramework.Proto.ScoreFormProto();
        }
        ScoreForm.MergeFrom(other.ScoreForm);
      }
      if (other.userForm_ != null) {
        if (userForm_ == null) {
          userForm_ = new global::XFramework.Proto.UserFormProto();
        }
        UserForm.MergeFrom(other.UserForm);
      }
      if (other.timeForm_ != null) {
        if (timeForm_ == null) {
          timeForm_ = new global::XFramework.Proto.TimeFormProto();
        }
        TimeForm.MergeFrom(other.TimeForm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scoreForm_ == null) {
              scoreForm_ = new global::XFramework.Proto.ScoreFormProto();
            }
            input.ReadMessage(scoreForm_);
            break;
          }
          case 18: {
            if (userForm_ == null) {
              userForm_ = new global::XFramework.Proto.UserFormProto();
            }
            input.ReadMessage(userForm_);
            break;
          }
          case 26: {
            if (timeForm_ == null) {
              timeForm_ = new global::XFramework.Proto.TimeFormProto();
            }
            input.ReadMessage(timeForm_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成绩分析的请求
  ///commandId = 0x00B5
  /// </summary>
  public sealed partial class ScoreAnalysisResp : pb::IMessage<ScoreAnalysisResp> {
    private static readonly pb::MessageParser<ScoreAnalysisResp> _parser = new pb::MessageParser<ScoreAnalysisResp>(() => new ScoreAnalysisResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreAnalysisResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisResp(ScoreAnalysisResp other) : this() {
      rangeRates_ = other.rangeRates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisResp Clone() {
      return new ScoreAnalysisResp(this);
    }

    /// <summary>Field number for the "rangeRates" field.</summary>
    public const int RangeRatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.RangeRateProto> _repeated_rangeRates_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.RangeRateProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.RangeRateProto> rangeRates_ = new pbc::RepeatedField<global::XFramework.Proto.RangeRateProto>();
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.RangeRateProto> RangeRates {
      get { return rangeRates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreAnalysisResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreAnalysisResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rangeRates_.Equals(other.rangeRates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rangeRates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rangeRates_.WriteTo(output, _repeated_rangeRates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rangeRates_.CalculateSize(_repeated_rangeRates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreAnalysisResp other) {
      if (other == null) {
        return;
      }
      rangeRates_.Add(other.rangeRates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rangeRates_.AddEntriesFrom(input, _repeated_rangeRates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 最近考试信息
  /// </summary>
  public sealed partial class LatelyExamProto : pb::IMessage<LatelyExamProto> {
    private static readonly pb::MessageParser<LatelyExamProto> _parser = new pb::MessageParser<LatelyExamProto>(() => new LatelyExamProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatelyExamProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatelyExamProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatelyExamProto(LatelyExamProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      paperId_ = other.paperId_;
      categoryId_ = other.categoryId_;
      status_ = other.status_;
      duration_ = other.duration_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      totalScore_ = other.totalScore_;
      passScore_ = other.passScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatelyExamProto Clone() {
      return new LatelyExamProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///考试id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///考试名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paperId" field.</summary>
    public const int PaperIdFieldNumber = 3;
    private string paperId_ = "";
    /// <summary>
    ///试卷id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaperId {
      get { return paperId_; }
      set {
        paperId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 4;
    private string categoryId_ = "";
    /// <summary>
    ///考试分类id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    /// <summary>
    ///考试状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private int duration_;
    /// <summary>
    ///考试时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private long startTime_;
    /// <summary>
    ///开考时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 8;
    private long endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 9;
    private int totalScore_;
    /// <summary>
    ///总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "passScore" field.</summary>
    public const int PassScoreFieldNumber = 10;
    private int passScore_;
    /// <summary>
    ///及格分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassScore {
      get { return passScore_; }
      set {
        passScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatelyExamProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatelyExamProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (PaperId != other.PaperId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Status != other.Status) return false;
      if (Duration != other.Duration) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (TotalScore != other.TotalScore) return false;
      if (PassScore != other.PassScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PaperId.Length != 0) hash ^= PaperId.GetHashCode();
      if (CategoryId.Length != 0) hash ^= CategoryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
      if (PassScore != 0) hash ^= PassScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PaperId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PaperId);
      }
      if (CategoryId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CategoryId);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (Duration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Duration);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndTime);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalScore);
      }
      if (PassScore != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PassScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PaperId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaperId);
      }
      if (CategoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (PassScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatelyExamProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PaperId.Length != 0) {
        PaperId = other.PaperId;
      }
      if (other.CategoryId.Length != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.TotalScore != 0) {
        TotalScore = other.TotalScore;
      }
      if (other.PassScore != 0) {
        PassScore = other.PassScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            PaperId = input.ReadString();
            break;
          }
          case 34: {
            CategoryId = input.ReadString();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            Duration = input.ReadInt32();
            break;
          }
          case 56: {
            StartTime = input.ReadInt64();
            break;
          }
          case 64: {
            EndTime = input.ReadInt64();
            break;
          }
          case 72: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 80: {
            PassScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///考试试卷
  /// </summary>
  public sealed partial class ExamPaperProto : pb::IMessage<ExamPaperProto> {
    private static readonly pb::MessageParser<ExamPaperProto> _parser = new pb::MessageParser<ExamPaperProto>(() => new ExamPaperProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExamPaperProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperProto(ExamPaperProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      softwareId_ = other.softwareId_;
      categoryId_ = other.categoryId_;
      status_ = other.status_;
      totalScore_ = other.totalScore_;
      passScore_ = other.passScore_;
      remark_ = other.remark_;
      sections_ = other.sections_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperProto Clone() {
      return new ExamPaperProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试卷id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///试卷名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 4;
    private string categoryId_ = "";
    /// <summary>
    ///试卷种类id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    /// <summary>
    ///试卷状态：0 禁用 1 启用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 6;
    private int totalScore_;
    /// <summary>
    ///总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "passScore" field.</summary>
    public const int PassScoreFieldNumber = 7;
    private int passScore_;
    /// <summary>
    ///及格分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassScore {
      get { return passScore_; }
      set {
        passScore_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 8;
    private string remark_ = "";
    /// <summary>
    ///试卷说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sections" field.</summary>
    public const int SectionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ExamPaperSectionProto> _repeated_sections_codec
        = pb::FieldCodec.ForMessage(74, global::XFramework.Proto.ExamPaperSectionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ExamPaperSectionProto> sections_ = new pbc::RepeatedField<global::XFramework.Proto.ExamPaperSectionProto>();
    /// <summary>
    ///章节列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ExamPaperSectionProto> Sections {
      get { return sections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExamPaperProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExamPaperProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Status != other.Status) return false;
      if (TotalScore != other.TotalScore) return false;
      if (PassScore != other.PassScore) return false;
      if (Remark != other.Remark) return false;
      if(!sections_.Equals(other.sections_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (CategoryId.Length != 0) hash ^= CategoryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
      if (PassScore != 0) hash ^= PassScore.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      hash ^= sections_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (CategoryId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CategoryId);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalScore);
      }
      if (PassScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PassScore);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Remark);
      }
      sections_.WriteTo(output, _repeated_sections_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (CategoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (PassScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassScore);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      size += sections_.CalculateSize(_repeated_sections_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExamPaperProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.CategoryId.Length != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TotalScore != 0) {
        TotalScore = other.TotalScore;
      }
      if (other.PassScore != 0) {
        PassScore = other.PassScore;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      sections_.Add(other.sections_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 34: {
            CategoryId = input.ReadString();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 56: {
            PassScore = input.ReadInt32();
            break;
          }
          case 66: {
            Remark = input.ReadString();
            break;
          }
          case 74: {
            sections_.AddEntriesFrom(input, _repeated_sections_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///考试试卷章节
  /// </summary>
  public sealed partial class ExamPaperSectionProto : pb::IMessage<ExamPaperSectionProto> {
    private static readonly pb::MessageParser<ExamPaperSectionProto> _parser = new pb::MessageParser<ExamPaperSectionProto>(() => new ExamPaperSectionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExamPaperSectionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperSectionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperSectionProto(ExamPaperSectionProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      remark_ = other.remark_;
      qType_ = other.qType_;
      number_ = other.number_;
      score_ = other.score_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamPaperSectionProto Clone() {
      return new ExamPaperSectionProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试卷节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///试卷节名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    /// <summary>
    ///试卷节说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qType" field.</summary>
    public const int QTypeFieldNumber = 4;
    private int qType_;
    /// <summary>
    ///题型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QType {
      get { return qType_; }
      set {
        qType_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 5;
    private int number_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private int score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::XFramework.Proto.ExamQuestionProto> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(58, global::XFramework.Proto.ExamQuestionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.ExamQuestionProto> questions_ = new pbc::RepeatedField<global::XFramework.Proto.ExamQuestionProto>();
    /// <summary>
    ///试题列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.ExamQuestionProto> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExamPaperSectionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExamPaperSectionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      if (QType != other.QType) return false;
      if (Number != other.Number) return false;
      if (Score != other.Score) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (QType != 0) hash ^= QType.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (QType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(QType);
      }
      if (Number != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Number);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (QType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QType);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExamPaperSectionProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.QType != 0) {
        QType = other.QType;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 32: {
            QType = input.ReadInt32();
            break;
          }
          case 40: {
            Number = input.ReadInt32();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 58: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///考试题目
  /// </summary>
  public sealed partial class ExamQuestionProto : pb::IMessage<ExamQuestionProto> {
    private static readonly pb::MessageParser<ExamQuestionProto> _parser = new pb::MessageParser<ExamQuestionProto>(() => new ExamQuestionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExamQuestionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamQuestionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamQuestionProto(ExamQuestionProto other) : this() {
      id_ = other.id_;
      bankId_ = other.bankId_;
      type_ = other.type_;
      level_ = other.level_;
      from_ = other.from_;
      status_ = other.status_;
      content_ = other.content_;
      key_ = other.key_;
      resolve_ = other.resolve_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamQuestionProto Clone() {
      return new ExamQuestionProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bankId" field.</summary>
    public const int BankIdFieldNumber = 2;
    private string bankId_ = "";
    /// <summary>
    ///题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///试题类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///试题难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 5;
    private string from_ = "";
    /// <summary>
    ///试题来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    /// <summary>
    ///试题状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    ///试题内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 8;
    private string key_ = "";
    /// <summary>
    ///试题答案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve" field.</summary>
    public const int ResolveFieldNumber = 9;
    private string resolve_ = "";
    /// <summary>
    ///试题解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolve {
      get { return resolve_; }
      set {
        resolve_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 10;
    private string data_ = "";
    /// <summary>
    ///题目数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExamQuestionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExamQuestionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BankId != other.BankId) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (From != other.From) return false;
      if (Status != other.Status) return false;
      if (Content != other.Content) return false;
      if (Key != other.Key) return false;
      if (Resolve != other.Resolve) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Resolve.Length != 0) hash ^= Resolve.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BankId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (From.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(From);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Key);
      }
      if (Resolve.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Resolve);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Resolve.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolve);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExamQuestionProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Resolve.Length != 0) {
        Resolve = other.Resolve;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BankId = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 42: {
            From = input.ReadString();
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 66: {
            Key = input.ReadString();
            break;
          }
          case 74: {
            Resolve = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分数统计
  /// </summary>
  public sealed partial class ScoreFormProto : pb::IMessage<ScoreFormProto> {
    private static readonly pb::MessageParser<ScoreFormProto> _parser = new pb::MessageParser<ScoreFormProto>(() => new ScoreFormProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreFormProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreFormProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreFormProto(ScoreFormProto other) : this() {
      max_ = other.max_;
      min_ = other.min_;
      average_ = other.average_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreFormProto Clone() {
      return new ScoreFormProto(this);
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 1;
    private string max_ = "";
    /// <summary>
    ///最高分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Max {
      get { return max_; }
      set {
        max_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private string min_ = "";
    /// <summary>
    ///最低分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Min {
      get { return min_; }
      set {
        min_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "average" field.</summary>
    public const int AverageFieldNumber = 3;
    private string average_ = "";
    /// <summary>
    ///平均分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Average {
      get { return average_; }
      set {
        average_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreFormProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreFormProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Max != other.Max) return false;
      if (Min != other.Min) return false;
      if (Average != other.Average) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Max.Length != 0) hash ^= Max.GetHashCode();
      if (Min.Length != 0) hash ^= Min.GetHashCode();
      if (Average.Length != 0) hash ^= Average.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Max.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Max);
      }
      if (Min.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Min);
      }
      if (Average.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Average);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Max.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Max);
      }
      if (Min.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Min);
      }
      if (Average.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Average);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreFormProto other) {
      if (other == null) {
        return;
      }
      if (other.Max.Length != 0) {
        Max = other.Max;
      }
      if (other.Min.Length != 0) {
        Min = other.Min;
      }
      if (other.Average.Length != 0) {
        Average = other.Average;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Max = input.ReadString();
            break;
          }
          case 18: {
            Min = input.ReadString();
            break;
          }
          case 26: {
            Average = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户统计
  /// </summary>
  public sealed partial class UserFormProto : pb::IMessage<UserFormProto> {
    private static readonly pb::MessageParser<UserFormProto> _parser = new pb::MessageParser<UserFormProto>(() => new UserFormProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserFormProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserFormProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserFormProto(UserFormProto other) : this() {
      passNumber_ = other.passNumber_;
      passRate_ = other.passRate_;
      shouldNumber_ = other.shouldNumber_;
      attendNumber_ = other.attendNumber_;
      attendRate_ = other.attendRate_;
      absentNumber_ = other.absentNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserFormProto Clone() {
      return new UserFormProto(this);
    }

    /// <summary>Field number for the "passNumber" field.</summary>
    public const int PassNumberFieldNumber = 1;
    private int passNumber_;
    /// <summary>
    ///及格人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassNumber {
      get { return passNumber_; }
      set {
        passNumber_ = value;
      }
    }

    /// <summary>Field number for the "passRate" field.</summary>
    public const int PassRateFieldNumber = 2;
    private float passRate_;
    /// <summary>
    ///及格比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PassRate {
      get { return passRate_; }
      set {
        passRate_ = value;
      }
    }

    /// <summary>Field number for the "shouldNumber" field.</summary>
    public const int ShouldNumberFieldNumber = 3;
    private int shouldNumber_;
    /// <summary>
    ///应参加数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShouldNumber {
      get { return shouldNumber_; }
      set {
        shouldNumber_ = value;
      }
    }

    /// <summary>Field number for the "attendNumber" field.</summary>
    public const int AttendNumberFieldNumber = 4;
    private int attendNumber_;
    /// <summary>
    ///实际人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttendNumber {
      get { return attendNumber_; }
      set {
        attendNumber_ = value;
      }
    }

    /// <summary>Field number for the "attendRate" field.</summary>
    public const int AttendRateFieldNumber = 5;
    private float attendRate_;
    /// <summary>
    ///参加比率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttendRate {
      get { return attendRate_; }
      set {
        attendRate_ = value;
      }
    }

    /// <summary>Field number for the "absentNumber" field.</summary>
    public const int AbsentNumberFieldNumber = 6;
    private int absentNumber_;
    /// <summary>
    ///缺考人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbsentNumber {
      get { return absentNumber_; }
      set {
        absentNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserFormProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserFormProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PassNumber != other.PassNumber) return false;
      if (PassRate != other.PassRate) return false;
      if (ShouldNumber != other.ShouldNumber) return false;
      if (AttendNumber != other.AttendNumber) return false;
      if (AttendRate != other.AttendRate) return false;
      if (AbsentNumber != other.AbsentNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PassNumber != 0) hash ^= PassNumber.GetHashCode();
      if (PassRate != 0F) hash ^= PassRate.GetHashCode();
      if (ShouldNumber != 0) hash ^= ShouldNumber.GetHashCode();
      if (AttendNumber != 0) hash ^= AttendNumber.GetHashCode();
      if (AttendRate != 0F) hash ^= AttendRate.GetHashCode();
      if (AbsentNumber != 0) hash ^= AbsentNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PassNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PassNumber);
      }
      if (PassRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PassRate);
      }
      if (ShouldNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShouldNumber);
      }
      if (AttendNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttendNumber);
      }
      if (AttendRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttendRate);
      }
      if (AbsentNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AbsentNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PassNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassNumber);
      }
      if (PassRate != 0F) {
        size += 1 + 4;
      }
      if (ShouldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShouldNumber);
      }
      if (AttendNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttendNumber);
      }
      if (AttendRate != 0F) {
        size += 1 + 4;
      }
      if (AbsentNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbsentNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserFormProto other) {
      if (other == null) {
        return;
      }
      if (other.PassNumber != 0) {
        PassNumber = other.PassNumber;
      }
      if (other.PassRate != 0F) {
        PassRate = other.PassRate;
      }
      if (other.ShouldNumber != 0) {
        ShouldNumber = other.ShouldNumber;
      }
      if (other.AttendNumber != 0) {
        AttendNumber = other.AttendNumber;
      }
      if (other.AttendRate != 0F) {
        AttendRate = other.AttendRate;
      }
      if (other.AbsentNumber != 0) {
        AbsentNumber = other.AbsentNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PassNumber = input.ReadInt32();
            break;
          }
          case 21: {
            PassRate = input.ReadFloat();
            break;
          }
          case 24: {
            ShouldNumber = input.ReadInt32();
            break;
          }
          case 32: {
            AttendNumber = input.ReadInt32();
            break;
          }
          case 45: {
            AttendRate = input.ReadFloat();
            break;
          }
          case 48: {
            AbsentNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时间统计
  /// </summary>
  public sealed partial class TimeFormProto : pb::IMessage<TimeFormProto> {
    private static readonly pb::MessageParser<TimeFormProto> _parser = new pb::MessageParser<TimeFormProto>(() => new TimeFormProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeFormProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeFormProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeFormProto(TimeFormProto other) : this() {
      earliest_ = other.earliest_;
      latest_ = other.latest_;
      longest_ = other.longest_;
      shortest_ = other.shortest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeFormProto Clone() {
      return new TimeFormProto(this);
    }

    /// <summary>Field number for the "earliest" field.</summary>
    public const int EarliestFieldNumber = 1;
    private string earliest_ = "";
    /// <summary>
    ///最早交卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Earliest {
      get { return earliest_; }
      set {
        earliest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latest" field.</summary>
    public const int LatestFieldNumber = 2;
    private string latest_ = "";
    /// <summary>
    ///最迟交卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Latest {
      get { return latest_; }
      set {
        latest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "longest" field.</summary>
    public const int LongestFieldNumber = 3;
    private string longest_ = "";
    /// <summary>
    ///最长耗时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Longest {
      get { return longest_; }
      set {
        longest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortest" field.</summary>
    public const int ShortestFieldNumber = 4;
    private string shortest_ = "";
    /// <summary>
    ///最短耗时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shortest {
      get { return shortest_; }
      set {
        shortest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeFormProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeFormProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Earliest != other.Earliest) return false;
      if (Latest != other.Latest) return false;
      if (Longest != other.Longest) return false;
      if (Shortest != other.Shortest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Earliest.Length != 0) hash ^= Earliest.GetHashCode();
      if (Latest.Length != 0) hash ^= Latest.GetHashCode();
      if (Longest.Length != 0) hash ^= Longest.GetHashCode();
      if (Shortest.Length != 0) hash ^= Shortest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Earliest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Earliest);
      }
      if (Latest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Latest);
      }
      if (Longest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Longest);
      }
      if (Shortest.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Shortest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Earliest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Earliest);
      }
      if (Latest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Latest);
      }
      if (Longest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Longest);
      }
      if (Shortest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shortest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeFormProto other) {
      if (other == null) {
        return;
      }
      if (other.Earliest.Length != 0) {
        Earliest = other.Earliest;
      }
      if (other.Latest.Length != 0) {
        Latest = other.Latest;
      }
      if (other.Longest.Length != 0) {
        Longest = other.Longest;
      }
      if (other.Shortest.Length != 0) {
        Shortest = other.Shortest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Earliest = input.ReadString();
            break;
          }
          case 18: {
            Latest = input.ReadString();
            break;
          }
          case 26: {
            Longest = input.ReadString();
            break;
          }
          case 34: {
            Shortest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成绩区间比率
  /// </summary>
  public sealed partial class RangeRateProto : pb::IMessage<RangeRateProto> {
    private static readonly pb::MessageParser<RangeRateProto> _parser = new pb::MessageParser<RangeRateProto>(() => new RangeRateProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeRateProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRateProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRateProto(RangeRateProto other) : this() {
      index_ = other.index_;
      number_ = other.number_;
      rate_ = other.rate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRateProto Clone() {
      return new RangeRateProto(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///区间索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 3;
    private float rate_;
    /// <summary>
    ///比率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeRateProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeRateProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Number != other.Number) return false;
      if (Rate != other.Rate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Rate != 0F) hash ^= Rate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Rate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Rate != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeRateProto other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 29: {
            Rate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
