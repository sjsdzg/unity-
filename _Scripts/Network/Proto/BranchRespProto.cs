// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BranchRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from BranchRespProto.proto</summary>
  public static partial class BranchRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for BranchRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BranchRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVCcmFuY2hSZXNwUHJvdG8ucHJvdG8iPwoQSW5zZXJ0QnJhbmNoUmVzcBIP",
            "CgdzdWNjZXNzGAEgASgIEgoKAmlkGAIgASgJEg4KBmRldGFpbBgDIAEoCSIz",
            "ChBEZWxldGVCcmFuY2hSZXNwEg8KB3N1Y2Nlc3MYASABKAgSDgoGZGV0YWls",
            "GAIgASgJIjMKEFVwZGF0ZUJyYW5jaFJlc3ASDwoHc3VjY2VzcxgBIAEoCBIO",
            "CgZkZXRhaWwYAiABKAkiLQoNR2V0QnJhbmNoUmVzcBIcCgZicmFuY2gYASAB",
            "KAsyDC5CcmFuY2hQcm90byI4ChhHZXRCcmFuY2hCeUNvbmRpdGlvblJlc3AS",
            "HAoGYnJhbmNoGAEgASgLMgwuQnJhbmNoUHJvdG8iMgoRTGlzdEFsbEJyYW5j",
            "aFJlc3ASHQoHYnJhbmNocxgBIAMoCzIMLkJyYW5jaFByb3RvIjoKGUxpc3RC",
            "cmFuY2hCeUNvbmRpdGlvblJlc3ASHQoHYnJhbmNocxgBIAMoCzIMLkJyYW5j",
            "aFByb3RvIiAKD0NvdW50QnJhbmNoUmVzcBINCgVjb3VudBgBIAEoBSKAAQoO",
            "UGFnZUJyYW5jaFJlc3ASEwoLY3VycmVudFBhZ2UYASABKAUSEAoIcGFnZVNp",
            "emUYAiABKAUSFAoMdG90YWxSZWNvcmRzGAMgASgFEhIKCnRvdGFsUGFnZXMY",
            "BCABKAUSHQoHYnJhbmNocxgFIAMoCzIMLkJyYW5jaFByb3RvIisKGkNvdW50",
            "QnJhbmNoQnlDb25kaXRpb25SZXNwEg0KBWNvdW50GAEgASgFIosBChlQYWdl",
            "QnJhbmNoQnlDb25kaXRpb25SZXNwEhMKC2N1cnJlbnRQYWdlGAEgASgFEhAK",
            "CHBhZ2VTaXplGAIgASgFEhQKDHRvdGFsUmVjb3JkcxgDIAEoBRISCgp0b3Rh",
            "bFBhZ2VzGAQgASgFEh0KB2JyYW5jaHMYBSADKAsyDC5CcmFuY2hQcm90byIs",
            "ChVCYXRjaEluc2VydEJyYW5jaFJlc3ASEwoLYmF0Y2hSZXN1bHQYASABKAki",
            "LAoVQmF0Y2hEZWxldGVCcmFuY2hSZXNwEhMKC2JhdGNoUmVzdWx0GAEgASgJ",
            "IqEBCgtCcmFuY2hQcm90bxIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEg4K",
            "BnN0YXR1cxgDIAEoBRIOCgZwb3N0ZXIYBCABKAkSEgoKY3JlYXRlVGltZRgF",
            "IAEoAxIQCghtb2RpZmllchgGIAEoCRISCgp1cGRhdGVUaW1lGAcgASgDEg4K",
            "BnJlbWFyaxgIIAEoCRIOCgZhbW91bnQYCSABKAVCOgoUY24uY29tLnh6LnBy",
            "b3RvLnVzZXJCD0JyYW5jaFJlc3BQcm90b6oCEFhGcmFtZXdvcmsuUHJvdG9i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertBranchResp), global::XFramework.Proto.InsertBranchResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteBranchResp), global::XFramework.Proto.DeleteBranchResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateBranchResp), global::XFramework.Proto.UpdateBranchResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetBranchResp), global::XFramework.Proto.GetBranchResp.Parser, new[]{ "Branch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetBranchByConditionResp), global::XFramework.Proto.GetBranchByConditionResp.Parser, new[]{ "Branch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllBranchResp), global::XFramework.Proto.ListAllBranchResp.Parser, new[]{ "Branchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListBranchByConditionResp), global::XFramework.Proto.ListBranchByConditionResp.Parser, new[]{ "Branchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountBranchResp), global::XFramework.Proto.CountBranchResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageBranchResp), global::XFramework.Proto.PageBranchResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Branchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountBranchByConditionResp), global::XFramework.Proto.CountBranchByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageBranchByConditionResp), global::XFramework.Proto.PageBranchByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Branchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertBranchResp), global::XFramework.Proto.BatchInsertBranchResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteBranchResp), global::XFramework.Proto.BatchDeleteBranchResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BranchProto), global::XFramework.Proto.BranchProto.Parser, new[]{ "Id", "Name", "Status", "Poster", "CreateTime", "Modifier", "UpdateTime", "Remark", "Amount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add branch
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertBranchResp : pb::IMessage<InsertBranchResp> {
    private static readonly pb::MessageParser<InsertBranchResp> _parser = new pb::MessageParser<InsertBranchResp>(() => new InsertBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertBranchResp(InsertBranchResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertBranchResp Clone() {
      return new InsertBranchResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete branch
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteBranchResp : pb::IMessage<DeleteBranchResp> {
    private static readonly pb::MessageParser<DeleteBranchResp> _parser = new pb::MessageParser<DeleteBranchResp>(() => new DeleteBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBranchResp(DeleteBranchResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBranchResp Clone() {
      return new DeleteBranchResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update branch
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateBranchResp : pb::IMessage<UpdateBranchResp> {
    private static readonly pb::MessageParser<UpdateBranchResp> _parser = new pb::MessageParser<UpdateBranchResp>(() => new UpdateBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBranchResp(UpdateBranchResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateBranchResp Clone() {
      return new UpdateBranchResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get branch by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetBranchResp : pb::IMessage<GetBranchResp> {
    private static readonly pb::MessageParser<GetBranchResp> _parser = new pb::MessageParser<GetBranchResp>(() => new GetBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchResp(GetBranchResp other) : this() {
      Branch = other.branch_ != null ? other.Branch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchResp Clone() {
      return new GetBranchResp(this);
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 1;
    private global::XFramework.Proto.BranchProto branch_;
    /// <summary>
    ///部门
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.BranchProto Branch {
      get { return branch_; }
      set {
        branch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Branch, other.Branch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (branch_ != null) hash ^= Branch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (branch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Branch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (branch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Branch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.branch_ != null) {
        if (branch_ == null) {
          branch_ = new global::XFramework.Proto.BranchProto();
        }
        Branch.MergeFrom(other.Branch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (branch_ == null) {
              branch_ = new global::XFramework.Proto.BranchProto();
            }
            input.ReadMessage(branch_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get branch by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetBranchByConditionResp : pb::IMessage<GetBranchByConditionResp> {
    private static readonly pb::MessageParser<GetBranchByConditionResp> _parser = new pb::MessageParser<GetBranchByConditionResp>(() => new GetBranchByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBranchByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchByConditionResp(GetBranchByConditionResp other) : this() {
      Branch = other.branch_ != null ? other.Branch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBranchByConditionResp Clone() {
      return new GetBranchByConditionResp(this);
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 1;
    private global::XFramework.Proto.BranchProto branch_;
    /// <summary>
    ///部门
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.BranchProto Branch {
      get { return branch_; }
      set {
        branch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBranchByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBranchByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Branch, other.Branch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (branch_ != null) hash ^= Branch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (branch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Branch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (branch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Branch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBranchByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.branch_ != null) {
        if (branch_ == null) {
          branch_ = new global::XFramework.Proto.BranchProto();
        }
        Branch.MergeFrom(other.Branch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (branch_ == null) {
              branch_ = new global::XFramework.Proto.BranchProto();
            }
            input.ReadMessage(branch_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all branch
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllBranchResp : pb::IMessage<ListAllBranchResp> {
    private static readonly pb::MessageParser<ListAllBranchResp> _parser = new pb::MessageParser<ListAllBranchResp>(() => new ListAllBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllBranchResp(ListAllBranchResp other) : this() {
      branchs_ = other.branchs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllBranchResp Clone() {
      return new ListAllBranchResp(this);
    }

    /// <summary>Field number for the "branchs" field.</summary>
    public const int BranchsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.BranchProto> _repeated_branchs_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.BranchProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.BranchProto> branchs_ = new pbc::RepeatedField<global::XFramework.Proto.BranchProto>();
    /// <summary>
    ///The list of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.BranchProto> Branchs {
      get { return branchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!branchs_.Equals(other.branchs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= branchs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      branchs_.WriteTo(output, _repeated_branchs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += branchs_.CalculateSize(_repeated_branchs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllBranchResp other) {
      if (other == null) {
        return;
      }
      branchs_.Add(other.branchs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            branchs_.AddEntriesFrom(input, _repeated_branchs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list branch by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListBranchByConditionResp : pb::IMessage<ListBranchByConditionResp> {
    private static readonly pb::MessageParser<ListBranchByConditionResp> _parser = new pb::MessageParser<ListBranchByConditionResp>(() => new ListBranchByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBranchByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBranchByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBranchByConditionResp(ListBranchByConditionResp other) : this() {
      branchs_ = other.branchs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBranchByConditionResp Clone() {
      return new ListBranchByConditionResp(this);
    }

    /// <summary>Field number for the "branchs" field.</summary>
    public const int BranchsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.BranchProto> _repeated_branchs_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.BranchProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.BranchProto> branchs_ = new pbc::RepeatedField<global::XFramework.Proto.BranchProto>();
    /// <summary>
    ///The list of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.BranchProto> Branchs {
      get { return branchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBranchByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBranchByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!branchs_.Equals(other.branchs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= branchs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      branchs_.WriteTo(output, _repeated_branchs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += branchs_.CalculateSize(_repeated_branchs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBranchByConditionResp other) {
      if (other == null) {
        return;
      }
      branchs_.Add(other.branchs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            branchs_.AddEntriesFrom(input, _repeated_branchs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count branch
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountBranchResp : pb::IMessage<CountBranchResp> {
    private static readonly pb::MessageParser<CountBranchResp> _parser = new pb::MessageParser<CountBranchResp>(() => new CountBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchResp(CountBranchResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchResp Clone() {
      return new CountBranchResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page branch
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PageBranchResp : pb::IMessage<PageBranchResp> {
    private static readonly pb::MessageParser<PageBranchResp> _parser = new pb::MessageParser<PageBranchResp>(() => new PageBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchResp(PageBranchResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      branchs_ = other.branchs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchResp Clone() {
      return new PageBranchResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "branchs" field.</summary>
    public const int BranchsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.BranchProto> _repeated_branchs_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.BranchProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.BranchProto> branchs_ = new pbc::RepeatedField<global::XFramework.Proto.BranchProto>();
    /// <summary>
    ///The list of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.BranchProto> Branchs {
      get { return branchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!branchs_.Equals(other.branchs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= branchs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      branchs_.WriteTo(output, _repeated_branchs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += branchs_.CalculateSize(_repeated_branchs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      branchs_.Add(other.branchs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            branchs_.AddEntriesFrom(input, _repeated_branchs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count branch by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountBranchByConditionResp : pb::IMessage<CountBranchByConditionResp> {
    private static readonly pb::MessageParser<CountBranchByConditionResp> _parser = new pb::MessageParser<CountBranchByConditionResp>(() => new CountBranchByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountBranchByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchByConditionResp(CountBranchByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountBranchByConditionResp Clone() {
      return new CountBranchByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountBranchByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountBranchByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountBranchByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page branch by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PageBranchByConditionResp : pb::IMessage<PageBranchByConditionResp> {
    private static readonly pb::MessageParser<PageBranchByConditionResp> _parser = new pb::MessageParser<PageBranchByConditionResp>(() => new PageBranchByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageBranchByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchByConditionResp(PageBranchByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      branchs_ = other.branchs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageBranchByConditionResp Clone() {
      return new PageBranchByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "branchs" field.</summary>
    public const int BranchsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.BranchProto> _repeated_branchs_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.BranchProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.BranchProto> branchs_ = new pbc::RepeatedField<global::XFramework.Proto.BranchProto>();
    /// <summary>
    ///The list of branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.BranchProto> Branchs {
      get { return branchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageBranchByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageBranchByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!branchs_.Equals(other.branchs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= branchs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      branchs_.WriteTo(output, _repeated_branchs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += branchs_.CalculateSize(_repeated_branchs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageBranchByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      branchs_.Add(other.branchs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            branchs_.AddEntriesFrom(input, _repeated_branchs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert branch
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertBranchResp : pb::IMessage<BatchInsertBranchResp> {
    private static readonly pb::MessageParser<BatchInsertBranchResp> _parser = new pb::MessageParser<BatchInsertBranchResp>(() => new BatchInsertBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertBranchResp(BatchInsertBranchResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertBranchResp Clone() {
      return new BatchInsertBranchResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加部门的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete branch
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteBranchResp : pb::IMessage<BatchDeleteBranchResp> {
    private static readonly pb::MessageParser<BatchDeleteBranchResp> _parser = new pb::MessageParser<BatchDeleteBranchResp>(() => new BatchDeleteBranchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteBranchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteBranchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteBranchResp(BatchDeleteBranchResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteBranchResp Clone() {
      return new BatchDeleteBranchResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除部门的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteBranchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteBranchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteBranchResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///部门
  /// </summary>
  public sealed partial class BranchProto : pb::IMessage<BranchProto> {
    private static readonly pb::MessageParser<BranchProto> _parser = new pb::MessageParser<BranchProto>(() => new BranchProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BranchProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.BranchRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchProto(BranchProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      status_ = other.status_;
      poster_ = other.poster_;
      createTime_ = other.createTime_;
      modifier_ = other.modifier_;
      updateTime_ = other.updateTime_;
      remark_ = other.remark_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchProto Clone() {
      return new BranchProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///部门id（年级）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///部门名称（年级）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///部门状态 0:关闭 1:开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 4;
    private string poster_ = "";
    /// <summary>
    ///创建人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 6;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private long updateTime_;
    /// <summary>
    ///修改时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 8;
    private string remark_ = "";
    /// <summary>
    ///专业说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 9;
    private int amount_;
    /// <summary>
    ///部门数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BranchProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BranchProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (Poster != other.Poster) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Modifier != other.Modifier) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (Remark != other.Remark) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Poster);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreateTime);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Modifier);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UpdateTime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Remark);
      }
      if (Amount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BranchProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            Poster = input.ReadString();
            break;
          }
          case 40: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 50: {
            Modifier = input.ReadString();
            break;
          }
          case 56: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 66: {
            Remark = input.ReadString();
            break;
          }
          case 72: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
