// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuestionBankReqProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from QuestionBankReqProto.proto</summary>
  public static partial class QuestionBankReqProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for QuestionBankReqProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuestionBankReqProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpRdWVzdGlvbkJhbmtSZXFQcm90by5wcm90bxoRQ29tbW9uUHJvdG8ucHJv",
            "dG8iaQoVSW5zZXJ0UXVlc3Rpb25CYW5rUmVxEgwKBG5hbWUYASABKAkSEgoK",
            "c29mdHdhcmVJZBgCIAEoCRIOCgZzdGF0dXMYAyABKAUSDgoGcG9zdGVyGAQg",
            "ASgJEg4KBnJlbWFyaxgFIAEoCSIjChVEZWxldGVRdWVzdGlvbkJhbmtSZXES",
            "CgoCaWQYASABKAkidwoVVXBkYXRlUXVlc3Rpb25CYW5rUmVxEgoKAmlkGAEg",
            "ASgJEgwKBG5hbWUYAiABKAkSEgoKc29mdHdhcmVJZBgDIAEoCRIOCgZzdGF0",
            "dXMYBCABKAUSEAoIbW9kaWZpZXIYBSABKAkSDgoGcmVtYXJrGAYgASgJIiAK",
            "EkdldFF1ZXN0aW9uQmFua1JlcRIKCgJpZBgBIAEoCSJHCh1HZXRRdWVzdGlv",
            "bkJhbmtCeUNvbmRpdGlvblJlcRImCgpjb25kaXRpb25zGAEgAygLMhIuU3Fs",
            "Q29uZGl0aW9uUHJvdG8iGAoWTGlzdEFsbFF1ZXN0aW9uQmFua1JlcSJICh5M",
            "aXN0UXVlc3Rpb25CYW5rQnlDb25kaXRpb25SZXESJgoKY29uZGl0aW9ucxgB",
            "IAMoCzISLlNxbENvbmRpdGlvblByb3RvIhYKFENvdW50UXVlc3Rpb25CYW5r",
            "UmVxIjwKE1BhZ2VRdWVzdGlvbkJhbmtSZXESEwoLY3VycmVudFBhZ2UYASAB",
            "KAUSEAoIcGFnZVNpemUYAiABKAUiSQofQ291bnRRdWVzdGlvbkJhbmtCeUNv",
            "bmRpdGlvblJlcRImCgpjb25kaXRpb25zGAEgAygLMhIuU3FsQ29uZGl0aW9u",
            "UHJvdG8ibwoeUGFnZVF1ZXN0aW9uQmFua0J5Q29uZGl0aW9uUmVxEhMKC2N1",
            "cnJlbnRQYWdlGAEgASgFEhAKCHBhZ2VTaXplGAIgASgFEiYKCmNvbmRpdGlv",
            "bnMYAyADKAsyEi5TcWxDb25kaXRpb25Qcm90byJRChpCYXRjaEluc2VydFF1",
            "ZXN0aW9uQmFua1JlcRIzChNJbnNlcnRRdWVzdGlvbkJhbmtzGAEgAygLMhYu",
            "SW5zZXJ0UXVlc3Rpb25CYW5rUmVxIikKGkJhdGNoRGVsZXRlUXVlc3Rpb25C",
            "YW5rUmVxEgsKA2lkcxgBIAMoCUI/ChRjbi5jb20ueHoucHJvdG8uZXhhbUIU",
            "UXVlc3Rpb25CYW5rUmVxUHJvdG+qAhBYRnJhbWV3b3JrLlByb3RvYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::XFramework.Proto.CommonProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertQuestionBankReq), global::XFramework.Proto.InsertQuestionBankReq.Parser, new[]{ "Name", "SoftwareId", "Status", "Poster", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteQuestionBankReq), global::XFramework.Proto.DeleteQuestionBankReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateQuestionBankReq), global::XFramework.Proto.UpdateQuestionBankReq.Parser, new[]{ "Id", "Name", "SoftwareId", "Status", "Modifier", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionBankReq), global::XFramework.Proto.GetQuestionBankReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionBankByConditionReq), global::XFramework.Proto.GetQuestionBankByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllQuestionBankReq), global::XFramework.Proto.ListAllQuestionBankReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListQuestionBankByConditionReq), global::XFramework.Proto.ListQuestionBankByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionBankReq), global::XFramework.Proto.CountQuestionBankReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionBankReq), global::XFramework.Proto.PageQuestionBankReq.Parser, new[]{ "CurrentPage", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionBankByConditionReq), global::XFramework.Proto.CountQuestionBankByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionBankByConditionReq), global::XFramework.Proto.PageQuestionBankByConditionReq.Parser, new[]{ "CurrentPage", "PageSize", "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertQuestionBankReq), global::XFramework.Proto.BatchInsertQuestionBankReq.Parser, new[]{ "InsertQuestionBanks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteQuestionBankReq), global::XFramework.Proto.BatchDeleteQuestionBankReq.Parser, new[]{ "Ids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The request of add questionBank
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertQuestionBankReq : pb::IMessage<InsertQuestionBankReq> {
    private static readonly pb::MessageParser<InsertQuestionBankReq> _parser = new pb::MessageParser<InsertQuestionBankReq>(() => new InsertQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionBankReq(InsertQuestionBankReq other) : this() {
      name_ = other.name_;
      softwareId_ = other.softwareId_;
      status_ = other.status_;
      poster_ = other.poster_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionBankReq Clone() {
      return new InsertQuestionBankReq(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///题库名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 2;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///题库状态 0:关闭 1:开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 4;
    private string poster_ = "";
    /// <summary>
    ///创建人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 5;
    private string remark_ = "";
    /// <summary>
    ///题库说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Status != other.Status) return false;
      if (Poster != other.Poster) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SoftwareId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Poster);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertQuestionBankReq other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            SoftwareId = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            Poster = input.ReadString();
            break;
          }
          case 42: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of delete questionBank
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteQuestionBankReq : pb::IMessage<DeleteQuestionBankReq> {
    private static readonly pb::MessageParser<DeleteQuestionBankReq> _parser = new pb::MessageParser<DeleteQuestionBankReq>(() => new DeleteQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionBankReq(DeleteQuestionBankReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionBankReq Clone() {
      return new DeleteQuestionBankReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteQuestionBankReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of update questionBank
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateQuestionBankReq : pb::IMessage<UpdateQuestionBankReq> {
    private static readonly pb::MessageParser<UpdateQuestionBankReq> _parser = new pb::MessageParser<UpdateQuestionBankReq>(() => new UpdateQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionBankReq(UpdateQuestionBankReq other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      softwareId_ = other.softwareId_;
      status_ = other.status_;
      modifier_ = other.modifier_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionBankReq Clone() {
      return new UpdateQuestionBankReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题库id:UUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///题库名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    ///题库状态 0:关闭 1:开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 5;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 6;
    private string remark_ = "";
    /// <summary>
    ///题库说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Status != other.Status) return false;
      if (Modifier != other.Modifier) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Modifier);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateQuestionBankReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            Modifier = input.ReadString();
            break;
          }
          case 50: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get questionBank by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetQuestionBankReq : pb::IMessage<GetQuestionBankReq> {
    private static readonly pb::MessageParser<GetQuestionBankReq> _parser = new pb::MessageParser<GetQuestionBankReq>(() => new GetQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankReq(GetQuestionBankReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankReq Clone() {
      return new GetQuestionBankReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionBankReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get questionBank by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetQuestionBankByConditionReq : pb::IMessage<GetQuestionBankByConditionReq> {
    private static readonly pb::MessageParser<GetQuestionBankByConditionReq> _parser = new pb::MessageParser<GetQuestionBankByConditionReq>(() => new GetQuestionBankByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionBankByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankByConditionReq(GetQuestionBankByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionBankByConditionReq Clone() {
      return new GetQuestionBankByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionBankByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionBankByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionBankByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of list all questionBank
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListAllQuestionBankReq : pb::IMessage<ListAllQuestionBankReq> {
    private static readonly pb::MessageParser<ListAllQuestionBankReq> _parser = new pb::MessageParser<ListAllQuestionBankReq>(() => new ListAllQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionBankReq(ListAllQuestionBankReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionBankReq Clone() {
      return new ListAllQuestionBankReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllQuestionBankReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of list questionBank by condition
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class ListQuestionBankByConditionReq : pb::IMessage<ListQuestionBankByConditionReq> {
    private static readonly pb::MessageParser<ListQuestionBankByConditionReq> _parser = new pb::MessageParser<ListQuestionBankByConditionReq>(() => new ListQuestionBankByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListQuestionBankByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionBankByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionBankByConditionReq(ListQuestionBankByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionBankByConditionReq Clone() {
      return new ListQuestionBankByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListQuestionBankByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListQuestionBankByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListQuestionBankByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count questionBank
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class CountQuestionBankReq : pb::IMessage<CountQuestionBankReq> {
    private static readonly pb::MessageParser<CountQuestionBankReq> _parser = new pb::MessageParser<CountQuestionBankReq>(() => new CountQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankReq(CountQuestionBankReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankReq Clone() {
      return new CountQuestionBankReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionBankReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of page questionBank
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class PageQuestionBankReq : pb::IMessage<PageQuestionBankReq> {
    private static readonly pb::MessageParser<PageQuestionBankReq> _parser = new pb::MessageParser<PageQuestionBankReq>(() => new PageQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankReq(PageQuestionBankReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankReq Clone() {
      return new PageQuestionBankReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionBankReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count questionBank by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class CountQuestionBankByConditionReq : pb::IMessage<CountQuestionBankByConditionReq> {
    private static readonly pb::MessageParser<CountQuestionBankByConditionReq> _parser = new pb::MessageParser<CountQuestionBankByConditionReq>(() => new CountQuestionBankByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionBankByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankByConditionReq(CountQuestionBankByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionBankByConditionReq Clone() {
      return new CountQuestionBankByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionBankByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionBankByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionBankByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of page questionBank by condition
  ///commandId = 0x00*B
  /// </summary>
  public sealed partial class PageQuestionBankByConditionReq : pb::IMessage<PageQuestionBankByConditionReq> {
    private static readonly pb::MessageParser<PageQuestionBankByConditionReq> _parser = new pb::MessageParser<PageQuestionBankByConditionReq>(() => new PageQuestionBankByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionBankByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankByConditionReq(PageQuestionBankByConditionReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionBankByConditionReq Clone() {
      return new PageQuestionBankByConditionReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(26, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionBankByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionBankByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionBankByConditionReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch insert questionBank
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertQuestionBankReq : pb::IMessage<BatchInsertQuestionBankReq> {
    private static readonly pb::MessageParser<BatchInsertQuestionBankReq> _parser = new pb::MessageParser<BatchInsertQuestionBankReq>(() => new BatchInsertQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionBankReq(BatchInsertQuestionBankReq other) : this() {
      insertQuestionBanks_ = other.insertQuestionBanks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionBankReq Clone() {
      return new BatchInsertQuestionBankReq(this);
    }

    /// <summary>Field number for the "InsertQuestionBanks" field.</summary>
    public const int InsertQuestionBanksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.InsertQuestionBankReq> _repeated_insertQuestionBanks_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.InsertQuestionBankReq.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.InsertQuestionBankReq> insertQuestionBanks_ = new pbc::RepeatedField<global::XFramework.Proto.InsertQuestionBankReq>();
    /// <summary>
    ///试题库items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.InsertQuestionBankReq> InsertQuestionBanks {
      get { return insertQuestionBanks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!insertQuestionBanks_.Equals(other.insertQuestionBanks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= insertQuestionBanks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      insertQuestionBanks_.WriteTo(output, _repeated_insertQuestionBanks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += insertQuestionBanks_.CalculateSize(_repeated_insertQuestionBanks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertQuestionBankReq other) {
      if (other == null) {
        return;
      }
      insertQuestionBanks_.Add(other.insertQuestionBanks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            insertQuestionBanks_.AddEntriesFrom(input, _repeated_insertQuestionBanks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch delete questionBank
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteQuestionBankReq : pb::IMessage<BatchDeleteQuestionBankReq> {
    private static readonly pb::MessageParser<BatchDeleteQuestionBankReq> _parser = new pb::MessageParser<BatchDeleteQuestionBankReq>(() => new BatchDeleteQuestionBankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteQuestionBankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionBankReqProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionBankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionBankReq(BatchDeleteQuestionBankReq other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionBankReq Clone() {
      return new BatchDeleteQuestionBankReq(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///试题库items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteQuestionBankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteQuestionBankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteQuestionBankReq other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
