// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLoginLogReqProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from UserLoginLogReqProto.proto</summary>
  public static partial class UserLoginLogReqProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for UserLoginLogReqProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserLoginLogReqProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpVc2VyTG9naW5Mb2dSZXFQcm90by5wcm90bxoRQ29tbW9uUHJvdG8ucHJv",
            "dG8ieAoVSW5zZXJ0VXNlckxvZ2luTG9nUmVxEhAKCHVzZXJOYW1lGAEgASgJ",
            "EhIKCnNvZnR3YXJlSWQYAiABKAkSDAoEdHlwZRgDIAEoBRIKCgJpcBgEIAEo",
            "CRIPCgdhZGRyZXNzGAUgASgJEg4KBnJlbWFyaxgGIAEoCSIjChVEZWxldGVV",
            "c2VyTG9naW5Mb2dSZXESCgoCaWQYASABKAkihAEKFVVwZGF0ZVVzZXJMb2dp",
            "bkxvZ1JlcRIKCgJpZBgBIAEoCRIQCgh1c2VyTmFtZRgCIAEoCRISCgpzb2Z0",
            "d2FyZUlkGAMgASgJEgwKBHR5cGUYBCABKAUSCgoCaXAYBSABKAkSDwoHYWRk",
            "cmVzcxgGIAEoCRIOCgZyZW1hcmsYByABKAkiIAoSR2V0VXNlckxvZ2luTG9n",
            "UmVxEgoKAmlkGAEgASgJIkcKHUdldFVzZXJMb2dpbkxvZ0J5Q29uZGl0aW9u",
            "UmVxEiYKCmNvbmRpdGlvbnMYASADKAsyEi5TcWxDb25kaXRpb25Qcm90byIY",
            "ChZMaXN0QWxsVXNlckxvZ2luTG9nUmVxIkgKHkxpc3RVc2VyTG9naW5Mb2dC",
            "eUNvbmRpdGlvblJlcRImCgpjb25kaXRpb25zGAEgAygLMhIuU3FsQ29uZGl0",
            "aW9uUHJvdG8iFgoUQ291bnRVc2VyTG9naW5Mb2dSZXEiPAoTUGFnZVVzZXJM",
            "b2dpbkxvZ1JlcRITCgtjdXJyZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgC",
            "IAEoBSJJCh9Db3VudFVzZXJMb2dpbkxvZ0J5Q29uZGl0aW9uUmVxEiYKCmNv",
            "bmRpdGlvbnMYASADKAsyEi5TcWxDb25kaXRpb25Qcm90byJvCh5QYWdlVXNl",
            "ckxvZ2luTG9nQnlDb25kaXRpb25SZXESEwoLY3VycmVudFBhZ2UYASABKAUS",
            "EAoIcGFnZVNpemUYAiABKAUSJgoKY29uZGl0aW9ucxgDIAMoCzISLlNxbENv",
            "bmRpdGlvblByb3RvIlEKGkJhdGNoSW5zZXJ0VXNlckxvZ2luTG9nUmVxEjMK",
            "E0luc2VydFVzZXJMb2dpbkxvZ3MYASADKAsyFi5JbnNlcnRVc2VyTG9naW5M",
            "b2dSZXEiKQoaQmF0Y2hEZWxldGVVc2VyTG9naW5Mb2dSZXESCwoDaWRzGAEg",
            "AygJQj4KE2NuLmNvbS54ei5wcm90by5sb2dCFFVzZXJMb2dpbkxvZ1JlcVBy",
            "b3RvqgIQWEZyYW1ld29yay5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::XFramework.Proto.CommonProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertUserLoginLogReq), global::XFramework.Proto.InsertUserLoginLogReq.Parser, new[]{ "UserName", "SoftwareId", "Type", "Ip", "Address", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteUserLoginLogReq), global::XFramework.Proto.DeleteUserLoginLogReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateUserLoginLogReq), global::XFramework.Proto.UpdateUserLoginLogReq.Parser, new[]{ "Id", "UserName", "SoftwareId", "Type", "Ip", "Address", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetUserLoginLogReq), global::XFramework.Proto.GetUserLoginLogReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetUserLoginLogByConditionReq), global::XFramework.Proto.GetUserLoginLogByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllUserLoginLogReq), global::XFramework.Proto.ListAllUserLoginLogReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListUserLoginLogByConditionReq), global::XFramework.Proto.ListUserLoginLogByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountUserLoginLogReq), global::XFramework.Proto.CountUserLoginLogReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageUserLoginLogReq), global::XFramework.Proto.PageUserLoginLogReq.Parser, new[]{ "CurrentPage", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountUserLoginLogByConditionReq), global::XFramework.Proto.CountUserLoginLogByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageUserLoginLogByConditionReq), global::XFramework.Proto.PageUserLoginLogByConditionReq.Parser, new[]{ "CurrentPage", "PageSize", "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertUserLoginLogReq), global::XFramework.Proto.BatchInsertUserLoginLogReq.Parser, new[]{ "InsertUserLoginLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteUserLoginLogReq), global::XFramework.Proto.BatchDeleteUserLoginLogReq.Parser, new[]{ "Ids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The request of add userLoginLog
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertUserLoginLogReq : pb::IMessage<InsertUserLoginLogReq> {
    private static readonly pb::MessageParser<InsertUserLoginLogReq> _parser = new pb::MessageParser<InsertUserLoginLogReq>(() => new InsertUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUserLoginLogReq(InsertUserLoginLogReq other) : this() {
      userName_ = other.userName_;
      softwareId_ = other.softwareId_;
      type_ = other.type_;
      ip_ = other.ip_;
      address_ = other.address_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertUserLoginLogReq Clone() {
      return new InsertUserLoginLogReq(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 2;
    private string softwareId_ = "";
    /// <summary>
    ///软件标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///登录类型[0:登录 1:退出 2:重连 3:强制下线]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    private string ip_ = "";
    /// <summary>
    ///ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 5;
    private string address_ = "";
    /// <summary>
    ///登录地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 6;
    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Type != other.Type) return false;
      if (Ip != other.Ip) return false;
      if (Address != other.Address) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SoftwareId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Address);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            SoftwareId = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Address = input.ReadString();
            break;
          }
          case 50: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of delete userLoginLog
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteUserLoginLogReq : pb::IMessage<DeleteUserLoginLogReq> {
    private static readonly pb::MessageParser<DeleteUserLoginLogReq> _parser = new pb::MessageParser<DeleteUserLoginLogReq>(() => new DeleteUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteUserLoginLogReq(DeleteUserLoginLogReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteUserLoginLogReq Clone() {
      return new DeleteUserLoginLogReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///用户登录日志id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of update userLoginLog
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateUserLoginLogReq : pb::IMessage<UpdateUserLoginLogReq> {
    private static readonly pb::MessageParser<UpdateUserLoginLogReq> _parser = new pb::MessageParser<UpdateUserLoginLogReq>(() => new UpdateUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserLoginLogReq(UpdateUserLoginLogReq other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      softwareId_ = other.softwareId_;
      type_ = other.type_;
      ip_ = other.ip_;
      address_ = other.address_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUserLoginLogReq Clone() {
      return new UpdateUserLoginLogReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///登录类型[0:登录 1:退出 2:重连 3:强制下线]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    ///ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 6;
    private string address_ = "";
    /// <summary>
    ///登录地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 7;
    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Type != other.Type) return false;
      if (Ip != other.Ip) return false;
      if (Address != other.Address) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Address);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 50: {
            Address = input.ReadString();
            break;
          }
          case 58: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get userLoginLog by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetUserLoginLogReq : pb::IMessage<GetUserLoginLogReq> {
    private static readonly pb::MessageParser<GetUserLoginLogReq> _parser = new pb::MessageParser<GetUserLoginLogReq>(() => new GetUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogReq(GetUserLoginLogReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogReq Clone() {
      return new GetUserLoginLogReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///用户登录日志id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get userLoginLog by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetUserLoginLogByConditionReq : pb::IMessage<GetUserLoginLogByConditionReq> {
    private static readonly pb::MessageParser<GetUserLoginLogByConditionReq> _parser = new pb::MessageParser<GetUserLoginLogByConditionReq>(() => new GetUserLoginLogByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserLoginLogByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogByConditionReq(GetUserLoginLogByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserLoginLogByConditionReq Clone() {
      return new GetUserLoginLogByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserLoginLogByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserLoginLogByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserLoginLogByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of list all userLoginLog
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListAllUserLoginLogReq : pb::IMessage<ListAllUserLoginLogReq> {
    private static readonly pb::MessageParser<ListAllUserLoginLogReq> _parser = new pb::MessageParser<ListAllUserLoginLogReq>(() => new ListAllUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllUserLoginLogReq(ListAllUserLoginLogReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllUserLoginLogReq Clone() {
      return new ListAllUserLoginLogReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllUserLoginLogReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of list userLoginLog by condition
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class ListUserLoginLogByConditionReq : pb::IMessage<ListUserLoginLogByConditionReq> {
    private static readonly pb::MessageParser<ListUserLoginLogByConditionReq> _parser = new pb::MessageParser<ListUserLoginLogByConditionReq>(() => new ListUserLoginLogByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUserLoginLogByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserLoginLogByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserLoginLogByConditionReq(ListUserLoginLogByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserLoginLogByConditionReq Clone() {
      return new ListUserLoginLogByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUserLoginLogByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUserLoginLogByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUserLoginLogByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count userLoginLog
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class CountUserLoginLogReq : pb::IMessage<CountUserLoginLogReq> {
    private static readonly pb::MessageParser<CountUserLoginLogReq> _parser = new pb::MessageParser<CountUserLoginLogReq>(() => new CountUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogReq(CountUserLoginLogReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogReq Clone() {
      return new CountUserLoginLogReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountUserLoginLogReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of page userLoginLog
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class PageUserLoginLogReq : pb::IMessage<PageUserLoginLogReq> {
    private static readonly pb::MessageParser<PageUserLoginLogReq> _parser = new pb::MessageParser<PageUserLoginLogReq>(() => new PageUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogReq(PageUserLoginLogReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogReq Clone() {
      return new PageUserLoginLogReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count userLoginLog by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class CountUserLoginLogByConditionReq : pb::IMessage<CountUserLoginLogByConditionReq> {
    private static readonly pb::MessageParser<CountUserLoginLogByConditionReq> _parser = new pb::MessageParser<CountUserLoginLogByConditionReq>(() => new CountUserLoginLogByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountUserLoginLogByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogByConditionReq(CountUserLoginLogByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountUserLoginLogByConditionReq Clone() {
      return new CountUserLoginLogByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountUserLoginLogByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountUserLoginLogByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountUserLoginLogByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of page userLoginLog by condition
  ///commandId = 0x00*B
  /// </summary>
  public sealed partial class PageUserLoginLogByConditionReq : pb::IMessage<PageUserLoginLogByConditionReq> {
    private static readonly pb::MessageParser<PageUserLoginLogByConditionReq> _parser = new pb::MessageParser<PageUserLoginLogByConditionReq>(() => new PageUserLoginLogByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageUserLoginLogByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogByConditionReq(PageUserLoginLogByConditionReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageUserLoginLogByConditionReq Clone() {
      return new PageUserLoginLogByConditionReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(26, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageUserLoginLogByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageUserLoginLogByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageUserLoginLogByConditionReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch insert userLoginLog
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertUserLoginLogReq : pb::IMessage<BatchInsertUserLoginLogReq> {
    private static readonly pb::MessageParser<BatchInsertUserLoginLogReq> _parser = new pb::MessageParser<BatchInsertUserLoginLogReq>(() => new BatchInsertUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertUserLoginLogReq(BatchInsertUserLoginLogReq other) : this() {
      insertUserLoginLogs_ = other.insertUserLoginLogs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertUserLoginLogReq Clone() {
      return new BatchInsertUserLoginLogReq(this);
    }

    /// <summary>Field number for the "InsertUserLoginLogs" field.</summary>
    public const int InsertUserLoginLogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.InsertUserLoginLogReq> _repeated_insertUserLoginLogs_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.InsertUserLoginLogReq.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.InsertUserLoginLogReq> insertUserLoginLogs_ = new pbc::RepeatedField<global::XFramework.Proto.InsertUserLoginLogReq>();
    /// <summary>
    ///用户登录日志items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.InsertUserLoginLogReq> InsertUserLoginLogs {
      get { return insertUserLoginLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!insertUserLoginLogs_.Equals(other.insertUserLoginLogs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= insertUserLoginLogs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      insertUserLoginLogs_.WriteTo(output, _repeated_insertUserLoginLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += insertUserLoginLogs_.CalculateSize(_repeated_insertUserLoginLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      insertUserLoginLogs_.Add(other.insertUserLoginLogs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            insertUserLoginLogs_.AddEntriesFrom(input, _repeated_insertUserLoginLogs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch delete userLoginLog
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteUserLoginLogReq : pb::IMessage<BatchDeleteUserLoginLogReq> {
    private static readonly pb::MessageParser<BatchDeleteUserLoginLogReq> _parser = new pb::MessageParser<BatchDeleteUserLoginLogReq>(() => new BatchDeleteUserLoginLogReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteUserLoginLogReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.UserLoginLogReqProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteUserLoginLogReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteUserLoginLogReq(BatchDeleteUserLoginLogReq other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteUserLoginLogReq Clone() {
      return new BatchDeleteUserLoginLogReq(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///用户登录日志items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteUserLoginLogReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteUserLoginLogReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteUserLoginLogReq other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
