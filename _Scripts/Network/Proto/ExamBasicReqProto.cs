// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExamBasicReqProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from ExamBasicReqProto.proto</summary>
  public static partial class ExamBasicReqProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for ExamBasicReqProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExamBasicReqProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdFeGFtQmFzaWNSZXFQcm90by5wcm90byIlCg9HZXRTdGF0c0luZm9SZXES",
            "EgoKc29mdHdhcmVJZBgBIAEoCSIiCg9HZXRFeGFtUGFwZXJSZXESDwoHcGFw",
            "ZXJJZBgBIAEoCSI3ChFMaXN0TGF0ZWx5RXhhbVJlcRISCgpzb2Z0d2FyZUlk",
            "GAEgASgJEg4KBm51bWJlchgCIAEoBSI1Cg9FeGFtQW5hbHlzaXNSZXESEgoK",
            "c29mdHdhcmVJZBgBIAEoCRIOCgZleGFtSWQYAiABKAkiUwoQU2NvcmVBbmFs",
            "eXNpc1JlcRISCgpzb2Z0d2FyZUlkGAEgASgJEg4KBmV4YW1JZBgCIAEoCRIb",
            "CgZyYW5nZXMYAyADKAsyCy5SYW5nZVByb3RvIiYKClJhbmdlUHJvdG8SCwoD",
            "bWluGAEgASgFEgsKA21heBgCIAEoBUJBChljbi5jb20ueHoucHJvdG8uZXhh",
            "bWJhc2ljQhFFeGFtQmFzaWNSZXFQcm90b6oCEFhGcmFtZXdvcmsuUHJvdG9i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetStatsInfoReq), global::XFramework.Proto.GetStatsInfoReq.Parser, new[]{ "SoftwareId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetExamPaperReq), global::XFramework.Proto.GetExamPaperReq.Parser, new[]{ "PaperId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListLatelyExamReq), global::XFramework.Proto.ListLatelyExamReq.Parser, new[]{ "SoftwareId", "Number" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ExamAnalysisReq), global::XFramework.Proto.ExamAnalysisReq.Parser, new[]{ "SoftwareId", "ExamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ScoreAnalysisReq), global::XFramework.Proto.ScoreAnalysisReq.Parser, new[]{ "SoftwareId", "ExamId", "Ranges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.RangeProto), global::XFramework.Proto.RangeProto.Parser, new[]{ "Min", "Max" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///考试系统基本信息的请求
  ///commandId = 0x00B1
  /// </summary>
  public sealed partial class GetStatsInfoReq : pb::IMessage<GetStatsInfoReq> {
    private static readonly pb::MessageParser<GetStatsInfoReq> _parser = new pb::MessageParser<GetStatsInfoReq>(() => new GetStatsInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatsInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoReq(GetStatsInfoReq other) : this() {
      softwareId_ = other.softwareId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatsInfoReq Clone() {
      return new GetStatsInfoReq(this);
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 1;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatsInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatsInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoftwareId != other.SoftwareId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SoftwareId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatsInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SoftwareId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取考试试卷的请求
  ///commandId = 0x00B2
  /// </summary>
  public sealed partial class GetExamPaperReq : pb::IMessage<GetExamPaperReq> {
    private static readonly pb::MessageParser<GetExamPaperReq> _parser = new pb::MessageParser<GetExamPaperReq>(() => new GetExamPaperReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExamPaperReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperReq(GetExamPaperReq other) : this() {
      paperId_ = other.paperId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExamPaperReq Clone() {
      return new GetExamPaperReq(this);
    }

    /// <summary>Field number for the "paperId" field.</summary>
    public const int PaperIdFieldNumber = 1;
    private string paperId_ = "";
    /// <summary>
    ///考试试卷Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaperId {
      get { return paperId_; }
      set {
        paperId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExamPaperReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExamPaperReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaperId != other.PaperId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaperId.Length != 0) hash ^= PaperId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaperId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaperId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaperId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaperId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExamPaperReq other) {
      if (other == null) {
        return;
      }
      if (other.PaperId.Length != 0) {
        PaperId = other.PaperId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PaperId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取最近几条考试的请求
  ///commandId = 0x00B3
  /// </summary>
  public sealed partial class ListLatelyExamReq : pb::IMessage<ListLatelyExamReq> {
    private static readonly pb::MessageParser<ListLatelyExamReq> _parser = new pb::MessageParser<ListLatelyExamReq>(() => new ListLatelyExamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLatelyExamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamReq(ListLatelyExamReq other) : this() {
      softwareId_ = other.softwareId_;
      number_ = other.number_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLatelyExamReq Clone() {
      return new ListLatelyExamReq(this);
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 1;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLatelyExamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLatelyExamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoftwareId != other.SoftwareId) return false;
      if (Number != other.Number) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SoftwareId);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLatelyExamReq other) {
      if (other == null) {
        return;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SoftwareId = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///考试分析的请求
  ///commandId = 0x00B4
  /// </summary>
  public sealed partial class ExamAnalysisReq : pb::IMessage<ExamAnalysisReq> {
    private static readonly pb::MessageParser<ExamAnalysisReq> _parser = new pb::MessageParser<ExamAnalysisReq>(() => new ExamAnalysisReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExamAnalysisReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisReq(ExamAnalysisReq other) : this() {
      softwareId_ = other.softwareId_;
      examId_ = other.examId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExamAnalysisReq Clone() {
      return new ExamAnalysisReq(this);
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 1;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examId" field.</summary>
    public const int ExamIdFieldNumber = 2;
    private string examId_ = "";
    /// <summary>
    ///考试ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExamId {
      get { return examId_; }
      set {
        examId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExamAnalysisReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExamAnalysisReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoftwareId != other.SoftwareId) return false;
      if (ExamId != other.ExamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (ExamId.Length != 0) hash ^= ExamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SoftwareId);
      }
      if (ExamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (ExamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExamAnalysisReq other) {
      if (other == null) {
        return;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.ExamId.Length != 0) {
        ExamId = other.ExamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SoftwareId = input.ReadString();
            break;
          }
          case 18: {
            ExamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成绩分析的请求
  ///commandId = 0x00B5
  /// </summary>
  public sealed partial class ScoreAnalysisReq : pb::IMessage<ScoreAnalysisReq> {
    private static readonly pb::MessageParser<ScoreAnalysisReq> _parser = new pb::MessageParser<ScoreAnalysisReq>(() => new ScoreAnalysisReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreAnalysisReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisReq(ScoreAnalysisReq other) : this() {
      softwareId_ = other.softwareId_;
      examId_ = other.examId_;
      ranges_ = other.ranges_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreAnalysisReq Clone() {
      return new ScoreAnalysisReq(this);
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 1;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examId" field.</summary>
    public const int ExamIdFieldNumber = 2;
    private string examId_ = "";
    /// <summary>
    ///考试ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExamId {
      get { return examId_; }
      set {
        examId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XFramework.Proto.RangeProto> _repeated_ranges_codec
        = pb::FieldCodec.ForMessage(26, global::XFramework.Proto.RangeProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.RangeProto> ranges_ = new pbc::RepeatedField<global::XFramework.Proto.RangeProto>();
    /// <summary>
    ///分数区间集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.RangeProto> Ranges {
      get { return ranges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreAnalysisReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreAnalysisReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoftwareId != other.SoftwareId) return false;
      if (ExamId != other.ExamId) return false;
      if(!ranges_.Equals(other.ranges_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (ExamId.Length != 0) hash ^= ExamId.GetHashCode();
      hash ^= ranges_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SoftwareId);
      }
      if (ExamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExamId);
      }
      ranges_.WriteTo(output, _repeated_ranges_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (ExamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExamId);
      }
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreAnalysisReq other) {
      if (other == null) {
        return;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.ExamId.Length != 0) {
        ExamId = other.ExamId;
      }
      ranges_.Add(other.ranges_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SoftwareId = input.ReadString();
            break;
          }
          case 18: {
            ExamId = input.ReadString();
            break;
          }
          case 26: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分数区间
  /// </summary>
  public sealed partial class RangeProto : pb::IMessage<RangeProto> {
    private static readonly pb::MessageParser<RangeProto> _parser = new pb::MessageParser<RangeProto>(() => new RangeProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.ExamBasicReqProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeProto(RangeProto other) : this() {
      min_ = other.min_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeProto Clone() {
      return new RangeProto(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private int min_;
    /// <summary>
    ///最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private int max_;
    /// <summary>
    ///最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeProto other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Min = input.ReadInt32();
            break;
          }
          case 16: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
