// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PaperCategoryRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from PaperCategoryRespProto.proto</summary>
  public static partial class PaperCategoryRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for PaperCategoryRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PaperCategoryRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQYXBlckNhdGVnb3J5UmVzcFByb3RvLnByb3RvIkYKF0luc2VydFBhcGVy",
            "Q2F0ZWdvcnlSZXNwEg8KB3N1Y2Nlc3MYASABKAgSCgoCaWQYAiABKAkSDgoG",
            "ZGV0YWlsGAMgASgJIjoKF0RlbGV0ZVBhcGVyQ2F0ZWdvcnlSZXNwEg8KB3N1",
            "Y2Nlc3MYASABKAgSDgoGZGV0YWlsGAIgASgJIjoKF1VwZGF0ZVBhcGVyQ2F0",
            "ZWdvcnlSZXNwEg8KB3N1Y2Nlc3MYASABKAgSDgoGZGV0YWlsGAIgASgJIkIK",
            "FEdldFBhcGVyQ2F0ZWdvcnlSZXNwEioKDXBhcGVyQ2F0ZWdvcnkYASABKAsy",
            "Ey5QYXBlckNhdGVnb3J5UHJvdG8iTQofR2V0UGFwZXJDYXRlZ29yeUJ5Q29u",
            "ZGl0aW9uUmVzcBIqCg1wYXBlckNhdGVnb3J5GAEgASgLMhMuUGFwZXJDYXRl",
            "Z29yeVByb3RvIkcKGExpc3RBbGxQYXBlckNhdGVnb3J5UmVzcBIrCg5wYXBl",
            "ckNhdGVnb3J5cxgBIAMoCzITLlBhcGVyQ2F0ZWdvcnlQcm90byJPCiBMaXN0",
            "UGFwZXJDYXRlZ29yeUJ5Q29uZGl0aW9uUmVzcBIrCg5wYXBlckNhdGVnb3J5",
            "cxgBIAMoCzITLlBhcGVyQ2F0ZWdvcnlQcm90byInChZDb3VudFBhcGVyQ2F0",
            "ZWdvcnlSZXNwEg0KBWNvdW50GAEgASgFIpUBChVQYWdlUGFwZXJDYXRlZ29y",
            "eVJlc3ASEwoLY3VycmVudFBhZ2UYASABKAUSEAoIcGFnZVNpemUYAiABKAUS",
            "FAoMdG90YWxSZWNvcmRzGAMgASgFEhIKCnRvdGFsUGFnZXMYBCABKAUSKwoO",
            "cGFwZXJDYXRlZ29yeXMYBSADKAsyEy5QYXBlckNhdGVnb3J5UHJvdG8iMgoh",
            "Q291bnRQYXBlckNhdGVnb3J5QnlDb25kaXRpb25SZXNwEg0KBWNvdW50GAEg",
            "ASgFIqABCiBQYWdlUGFwZXJDYXRlZ29yeUJ5Q29uZGl0aW9uUmVzcBITCgtj",
            "dXJyZW50UGFnZRgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIUCgx0b3RhbFJl",
            "Y29yZHMYAyABKAUSEgoKdG90YWxQYWdlcxgEIAEoBRIrCg5wYXBlckNhdGVn",
            "b3J5cxgFIAMoCzITLlBhcGVyQ2F0ZWdvcnlQcm90byIzChxCYXRjaEluc2Vy",
            "dFBhcGVyQ2F0ZWdvcnlSZXNwEhMKC2JhdGNoUmVzdWx0GAEgASgJIjMKHEJh",
            "dGNoRGVsZXRlUGFwZXJDYXRlZ29yeVJlc3ASEwoLYmF0Y2hSZXN1bHQYASAB",
            "KAkivAEKElBhcGVyQ2F0ZWdvcnlQcm90bxIKCgJpZBgBIAEoCRIMCgRuYW1l",
            "GAIgASgJEhIKCnNvZnR3YXJlSWQYAyABKAkSDgoGc3RhdHVzGAQgASgFEg4K",
            "BnBvc3RlchgFIAEoCRISCgpjcmVhdGVUaW1lGAYgASgDEhAKCG1vZGlmaWVy",
            "GAcgASgJEhIKCnVwZGF0ZVRpbWUYCCABKAMSDgoGcmVtYXJrGAkgASgJEg4K",
            "BmFtb3VudBgKIAEoBUJBChRjbi5jb20ueHoucHJvdG8uZXhhbUIWUGFwZXJD",
            "YXRlZ29yeVJlc3BQcm90b6oCEFhGcmFtZXdvcmsuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertPaperCategoryResp), global::XFramework.Proto.InsertPaperCategoryResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeletePaperCategoryResp), global::XFramework.Proto.DeletePaperCategoryResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdatePaperCategoryResp), global::XFramework.Proto.UpdatePaperCategoryResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetPaperCategoryResp), global::XFramework.Proto.GetPaperCategoryResp.Parser, new[]{ "PaperCategory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetPaperCategoryByConditionResp), global::XFramework.Proto.GetPaperCategoryByConditionResp.Parser, new[]{ "PaperCategory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllPaperCategoryResp), global::XFramework.Proto.ListAllPaperCategoryResp.Parser, new[]{ "PaperCategorys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListPaperCategoryByConditionResp), global::XFramework.Proto.ListPaperCategoryByConditionResp.Parser, new[]{ "PaperCategorys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountPaperCategoryResp), global::XFramework.Proto.CountPaperCategoryResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PagePaperCategoryResp), global::XFramework.Proto.PagePaperCategoryResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "PaperCategorys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountPaperCategoryByConditionResp), global::XFramework.Proto.CountPaperCategoryByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PagePaperCategoryByConditionResp), global::XFramework.Proto.PagePaperCategoryByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "PaperCategorys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertPaperCategoryResp), global::XFramework.Proto.BatchInsertPaperCategoryResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeletePaperCategoryResp), global::XFramework.Proto.BatchDeletePaperCategoryResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PaperCategoryProto), global::XFramework.Proto.PaperCategoryProto.Parser, new[]{ "Id", "Name", "SoftwareId", "Status", "Poster", "CreateTime", "Modifier", "UpdateTime", "Remark", "Amount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add paperCategory
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertPaperCategoryResp : pb::IMessage<InsertPaperCategoryResp> {
    private static readonly pb::MessageParser<InsertPaperCategoryResp> _parser = new pb::MessageParser<InsertPaperCategoryResp>(() => new InsertPaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertPaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperCategoryResp(InsertPaperCategoryResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertPaperCategoryResp Clone() {
      return new InsertPaperCategoryResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertPaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertPaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertPaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete paperCategory
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeletePaperCategoryResp : pb::IMessage<DeletePaperCategoryResp> {
    private static readonly pb::MessageParser<DeletePaperCategoryResp> _parser = new pb::MessageParser<DeletePaperCategoryResp>(() => new DeletePaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperCategoryResp(DeletePaperCategoryResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePaperCategoryResp Clone() {
      return new DeletePaperCategoryResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update paperCategory
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdatePaperCategoryResp : pb::IMessage<UpdatePaperCategoryResp> {
    private static readonly pb::MessageParser<UpdatePaperCategoryResp> _parser = new pb::MessageParser<UpdatePaperCategoryResp>(() => new UpdatePaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperCategoryResp(UpdatePaperCategoryResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePaperCategoryResp Clone() {
      return new UpdatePaperCategoryResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get paperCategory by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetPaperCategoryResp : pb::IMessage<GetPaperCategoryResp> {
    private static readonly pb::MessageParser<GetPaperCategoryResp> _parser = new pb::MessageParser<GetPaperCategoryResp>(() => new GetPaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryResp(GetPaperCategoryResp other) : this() {
      PaperCategory = other.paperCategory_ != null ? other.PaperCategory.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryResp Clone() {
      return new GetPaperCategoryResp(this);
    }

    /// <summary>Field number for the "paperCategory" field.</summary>
    public const int PaperCategoryFieldNumber = 1;
    private global::XFramework.Proto.PaperCategoryProto paperCategory_;
    /// <summary>
    ///试卷分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.PaperCategoryProto PaperCategory {
      get { return paperCategory_; }
      set {
        paperCategory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PaperCategory, other.PaperCategory)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paperCategory_ != null) hash ^= PaperCategory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paperCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PaperCategory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paperCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaperCategory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.paperCategory_ != null) {
        if (paperCategory_ == null) {
          paperCategory_ = new global::XFramework.Proto.PaperCategoryProto();
        }
        PaperCategory.MergeFrom(other.PaperCategory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (paperCategory_ == null) {
              paperCategory_ = new global::XFramework.Proto.PaperCategoryProto();
            }
            input.ReadMessage(paperCategory_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get paperCategory by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetPaperCategoryByConditionResp : pb::IMessage<GetPaperCategoryByConditionResp> {
    private static readonly pb::MessageParser<GetPaperCategoryByConditionResp> _parser = new pb::MessageParser<GetPaperCategoryByConditionResp>(() => new GetPaperCategoryByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPaperCategoryByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryByConditionResp(GetPaperCategoryByConditionResp other) : this() {
      PaperCategory = other.paperCategory_ != null ? other.PaperCategory.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPaperCategoryByConditionResp Clone() {
      return new GetPaperCategoryByConditionResp(this);
    }

    /// <summary>Field number for the "paperCategory" field.</summary>
    public const int PaperCategoryFieldNumber = 1;
    private global::XFramework.Proto.PaperCategoryProto paperCategory_;
    /// <summary>
    ///试卷分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.PaperCategoryProto PaperCategory {
      get { return paperCategory_; }
      set {
        paperCategory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPaperCategoryByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPaperCategoryByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PaperCategory, other.PaperCategory)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paperCategory_ != null) hash ^= PaperCategory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paperCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PaperCategory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paperCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaperCategory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPaperCategoryByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.paperCategory_ != null) {
        if (paperCategory_ == null) {
          paperCategory_ = new global::XFramework.Proto.PaperCategoryProto();
        }
        PaperCategory.MergeFrom(other.PaperCategory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (paperCategory_ == null) {
              paperCategory_ = new global::XFramework.Proto.PaperCategoryProto();
            }
            input.ReadMessage(paperCategory_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all paperCategory
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllPaperCategoryResp : pb::IMessage<ListAllPaperCategoryResp> {
    private static readonly pb::MessageParser<ListAllPaperCategoryResp> _parser = new pb::MessageParser<ListAllPaperCategoryResp>(() => new ListAllPaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllPaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperCategoryResp(ListAllPaperCategoryResp other) : this() {
      paperCategorys_ = other.paperCategorys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllPaperCategoryResp Clone() {
      return new ListAllPaperCategoryResp(this);
    }

    /// <summary>Field number for the "paperCategorys" field.</summary>
    public const int PaperCategorysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperCategoryProto> _repeated_paperCategorys_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.PaperCategoryProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> paperCategorys_ = new pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto>();
    /// <summary>
    ///The list of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> PaperCategorys {
      get { return paperCategorys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllPaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllPaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paperCategorys_.Equals(other.paperCategorys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paperCategorys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paperCategorys_.WriteTo(output, _repeated_paperCategorys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paperCategorys_.CalculateSize(_repeated_paperCategorys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllPaperCategoryResp other) {
      if (other == null) {
        return;
      }
      paperCategorys_.Add(other.paperCategorys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paperCategorys_.AddEntriesFrom(input, _repeated_paperCategorys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list paperCategory by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListPaperCategoryByConditionResp : pb::IMessage<ListPaperCategoryByConditionResp> {
    private static readonly pb::MessageParser<ListPaperCategoryByConditionResp> _parser = new pb::MessageParser<ListPaperCategoryByConditionResp>(() => new ListPaperCategoryByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaperCategoryByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperCategoryByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperCategoryByConditionResp(ListPaperCategoryByConditionResp other) : this() {
      paperCategorys_ = other.paperCategorys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaperCategoryByConditionResp Clone() {
      return new ListPaperCategoryByConditionResp(this);
    }

    /// <summary>Field number for the "paperCategorys" field.</summary>
    public const int PaperCategorysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperCategoryProto> _repeated_paperCategorys_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.PaperCategoryProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> paperCategorys_ = new pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto>();
    /// <summary>
    ///The list of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> PaperCategorys {
      get { return paperCategorys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaperCategoryByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaperCategoryByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paperCategorys_.Equals(other.paperCategorys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paperCategorys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paperCategorys_.WriteTo(output, _repeated_paperCategorys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paperCategorys_.CalculateSize(_repeated_paperCategorys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaperCategoryByConditionResp other) {
      if (other == null) {
        return;
      }
      paperCategorys_.Add(other.paperCategorys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paperCategorys_.AddEntriesFrom(input, _repeated_paperCategorys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count paperCategory
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountPaperCategoryResp : pb::IMessage<CountPaperCategoryResp> {
    private static readonly pb::MessageParser<CountPaperCategoryResp> _parser = new pb::MessageParser<CountPaperCategoryResp>(() => new CountPaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountPaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryResp(CountPaperCategoryResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryResp Clone() {
      return new CountPaperCategoryResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountPaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountPaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountPaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page paperCategory
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PagePaperCategoryResp : pb::IMessage<PagePaperCategoryResp> {
    private static readonly pb::MessageParser<PagePaperCategoryResp> _parser = new pb::MessageParser<PagePaperCategoryResp>(() => new PagePaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PagePaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryResp(PagePaperCategoryResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      paperCategorys_ = other.paperCategorys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryResp Clone() {
      return new PagePaperCategoryResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "paperCategorys" field.</summary>
    public const int PaperCategorysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperCategoryProto> _repeated_paperCategorys_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.PaperCategoryProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> paperCategorys_ = new pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto>();
    /// <summary>
    ///The list of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> PaperCategorys {
      get { return paperCategorys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PagePaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PagePaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!paperCategorys_.Equals(other.paperCategorys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= paperCategorys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      paperCategorys_.WriteTo(output, _repeated_paperCategorys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += paperCategorys_.CalculateSize(_repeated_paperCategorys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PagePaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      paperCategorys_.Add(other.paperCategorys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            paperCategorys_.AddEntriesFrom(input, _repeated_paperCategorys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count paperCategory by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountPaperCategoryByConditionResp : pb::IMessage<CountPaperCategoryByConditionResp> {
    private static readonly pb::MessageParser<CountPaperCategoryByConditionResp> _parser = new pb::MessageParser<CountPaperCategoryByConditionResp>(() => new CountPaperCategoryByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountPaperCategoryByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryByConditionResp(CountPaperCategoryByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountPaperCategoryByConditionResp Clone() {
      return new CountPaperCategoryByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountPaperCategoryByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountPaperCategoryByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountPaperCategoryByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page paperCategory by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PagePaperCategoryByConditionResp : pb::IMessage<PagePaperCategoryByConditionResp> {
    private static readonly pb::MessageParser<PagePaperCategoryByConditionResp> _parser = new pb::MessageParser<PagePaperCategoryByConditionResp>(() => new PagePaperCategoryByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PagePaperCategoryByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryByConditionResp(PagePaperCategoryByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      paperCategorys_ = other.paperCategorys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagePaperCategoryByConditionResp Clone() {
      return new PagePaperCategoryByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "paperCategorys" field.</summary>
    public const int PaperCategorysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.PaperCategoryProto> _repeated_paperCategorys_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.PaperCategoryProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> paperCategorys_ = new pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto>();
    /// <summary>
    ///The list of paperCategory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.PaperCategoryProto> PaperCategorys {
      get { return paperCategorys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PagePaperCategoryByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PagePaperCategoryByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!paperCategorys_.Equals(other.paperCategorys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= paperCategorys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      paperCategorys_.WriteTo(output, _repeated_paperCategorys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += paperCategorys_.CalculateSize(_repeated_paperCategorys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PagePaperCategoryByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      paperCategorys_.Add(other.paperCategorys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            paperCategorys_.AddEntriesFrom(input, _repeated_paperCategorys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert paperCategory
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertPaperCategoryResp : pb::IMessage<BatchInsertPaperCategoryResp> {
    private static readonly pb::MessageParser<BatchInsertPaperCategoryResp> _parser = new pb::MessageParser<BatchInsertPaperCategoryResp>(() => new BatchInsertPaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertPaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperCategoryResp(BatchInsertPaperCategoryResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertPaperCategoryResp Clone() {
      return new BatchInsertPaperCategoryResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加试卷分类的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertPaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertPaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertPaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete paperCategory
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeletePaperCategoryResp : pb::IMessage<BatchDeletePaperCategoryResp> {
    private static readonly pb::MessageParser<BatchDeletePaperCategoryResp> _parser = new pb::MessageParser<BatchDeletePaperCategoryResp>(() => new BatchDeletePaperCategoryResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeletePaperCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperCategoryResp(BatchDeletePaperCategoryResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeletePaperCategoryResp Clone() {
      return new BatchDeletePaperCategoryResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除试卷分类的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeletePaperCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeletePaperCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeletePaperCategoryResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///试卷分类
  /// </summary>
  public sealed partial class PaperCategoryProto : pb::IMessage<PaperCategoryProto> {
    private static readonly pb::MessageParser<PaperCategoryProto> _parser = new pb::MessageParser<PaperCategoryProto>(() => new PaperCategoryProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaperCategoryProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.PaperCategoryRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperCategoryProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperCategoryProto(PaperCategoryProto other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      softwareId_ = other.softwareId_;
      status_ = other.status_;
      poster_ = other.poster_;
      createTime_ = other.createTime_;
      modifier_ = other.modifier_;
      updateTime_ = other.updateTime_;
      remark_ = other.remark_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaperCategoryProto Clone() {
      return new PaperCategoryProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试卷分类id: UUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///试卷分类名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    ///试卷分类状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 5;
    private string poster_ = "";
    /// <summary>
    ///创建人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private long createTime_;
    /// <summary>
    ///创建日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 7;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 8;
    private long updateTime_;
    /// <summary>
    ///修改日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 9;
    private string remark_ = "";
    /// <summary>
    ///试卷分类备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 10;
    private int amount_;
    /// <summary>
    ///试卷分类数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaperCategoryProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaperCategoryProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Status != other.Status) return false;
      if (Poster != other.Poster) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Modifier != other.Modifier) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (Remark != other.Remark) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Poster);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreateTime);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Modifier);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UpdateTime);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remark);
      }
      if (Amount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaperCategoryProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            Poster = input.ReadString();
            break;
          }
          case 48: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 58: {
            Modifier = input.ReadString();
            break;
          }
          case 64: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 74: {
            Remark = input.ReadString();
            break;
          }
          case 80: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
