// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuestionReqProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from QuestionReqProto.proto</summary>
  public static partial class QuestionReqProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for QuestionReqProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuestionReqProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZRdWVzdGlvblJlcVByb3RvLnByb3RvGhFDb21tb25Qcm90by5wcm90byK/",
            "AQoRSW5zZXJ0UXVlc3Rpb25SZXESDgoGYmFua0lkGAEgASgJEhIKCnNvZnR3",
            "YXJlSWQYAiABKAkSDAoEdHlwZRgDIAEoBRINCgVsZXZlbBgEIAEoBRIMCgRm",
            "cm9tGAUgASgJEg4KBnN0YXR1cxgGIAEoBRIPCgdjb250ZW50GAcgASgJEgsK",
            "A2tleRgIIAEoCRIPCgdyZXNvbHZlGAkgASgJEg4KBnBvc3RlchgKIAEoCRIM",
            "CgRkYXRhGAsgASgJIh8KEURlbGV0ZVF1ZXN0aW9uUmVxEgoKAmlkGAEgASgJ",
            "Is0BChFVcGRhdGVRdWVzdGlvblJlcRIKCgJpZBgBIAEoCRIOCgZiYW5rSWQY",
            "AiABKAkSEgoKc29mdHdhcmVJZBgDIAEoCRIMCgR0eXBlGAQgASgFEg0KBWxl",
            "dmVsGAUgASgFEgwKBGZyb20YBiABKAkSDgoGc3RhdHVzGAcgASgFEg8KB2Nv",
            "bnRlbnQYCCABKAkSCwoDa2V5GAkgASgJEg8KB3Jlc29sdmUYCiABKAkSEAoI",
            "bW9kaWZpZXIYCyABKAkSDAoEZGF0YRgMIAEoCSIcCg5HZXRRdWVzdGlvblJl",
            "cRIKCgJpZBgBIAEoCSJDChlHZXRRdWVzdGlvbkJ5Q29uZGl0aW9uUmVxEiYK",
            "CmNvbmRpdGlvbnMYASADKAsyEi5TcWxDb25kaXRpb25Qcm90byIUChJMaXN0",
            "QWxsUXVlc3Rpb25SZXEiRAoaTGlzdFF1ZXN0aW9uQnlDb25kaXRpb25SZXES",
            "JgoKY29uZGl0aW9ucxgBIAMoCzISLlNxbENvbmRpdGlvblByb3RvIhIKEENv",
            "dW50UXVlc3Rpb25SZXEiOAoPUGFnZVF1ZXN0aW9uUmVxEhMKC2N1cnJlbnRQ",
            "YWdlGAEgASgFEhAKCHBhZ2VTaXplGAIgASgFIkUKG0NvdW50UXVlc3Rpb25C",
            "eUNvbmRpdGlvblJlcRImCgpjb25kaXRpb25zGAEgAygLMhIuU3FsQ29uZGl0",
            "aW9uUHJvdG8iawoaUGFnZVF1ZXN0aW9uQnlDb25kaXRpb25SZXESEwoLY3Vy",
            "cmVudFBhZ2UYASABKAUSEAoIcGFnZVNpemUYAiABKAUSJgoKY29uZGl0aW9u",
            "cxgDIAMoCzISLlNxbENvbmRpdGlvblByb3RvIkUKFkJhdGNoSW5zZXJ0UXVl",
            "c3Rpb25SZXESKwoPSW5zZXJ0UXVlc3Rpb25zGAEgAygLMhIuSW5zZXJ0UXVl",
            "c3Rpb25SZXEiJQoWQmF0Y2hEZWxldGVRdWVzdGlvblJlcRILCgNpZHMYASAD",
            "KAlCOwoUY24uY29tLnh6LnByb3RvLmV4YW1CEFF1ZXN0aW9uUmVxUHJvdG+q",
            "AhBYRnJhbWV3b3JrLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::XFramework.Proto.CommonProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertQuestionReq), global::XFramework.Proto.InsertQuestionReq.Parser, new[]{ "BankId", "SoftwareId", "Type", "Level", "From", "Status", "Content", "Key", "Resolve", "Poster", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteQuestionReq), global::XFramework.Proto.DeleteQuestionReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateQuestionReq), global::XFramework.Proto.UpdateQuestionReq.Parser, new[]{ "Id", "BankId", "SoftwareId", "Type", "Level", "From", "Status", "Content", "Key", "Resolve", "Modifier", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionReq), global::XFramework.Proto.GetQuestionReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionByConditionReq), global::XFramework.Proto.GetQuestionByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllQuestionReq), global::XFramework.Proto.ListAllQuestionReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListQuestionByConditionReq), global::XFramework.Proto.ListQuestionByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionReq), global::XFramework.Proto.CountQuestionReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionReq), global::XFramework.Proto.PageQuestionReq.Parser, new[]{ "CurrentPage", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionByConditionReq), global::XFramework.Proto.CountQuestionByConditionReq.Parser, new[]{ "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionByConditionReq), global::XFramework.Proto.PageQuestionByConditionReq.Parser, new[]{ "CurrentPage", "PageSize", "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertQuestionReq), global::XFramework.Proto.BatchInsertQuestionReq.Parser, new[]{ "InsertQuestions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteQuestionReq), global::XFramework.Proto.BatchDeleteQuestionReq.Parser, new[]{ "Ids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The request of add question
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertQuestionReq : pb::IMessage<InsertQuestionReq> {
    private static readonly pb::MessageParser<InsertQuestionReq> _parser = new pb::MessageParser<InsertQuestionReq>(() => new InsertQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionReq(InsertQuestionReq other) : this() {
      bankId_ = other.bankId_;
      softwareId_ = other.softwareId_;
      type_ = other.type_;
      level_ = other.level_;
      from_ = other.from_;
      status_ = other.status_;
      content_ = other.content_;
      key_ = other.key_;
      resolve_ = other.resolve_;
      poster_ = other.poster_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionReq Clone() {
      return new InsertQuestionReq(this);
    }

    /// <summary>Field number for the "bankId" field.</summary>
    public const int BankIdFieldNumber = 1;
    private string bankId_ = "";
    /// <summary>
    ///题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 2;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///0:单选题 1:多选题 2:判断题 3:填空题 4:简答题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///1:容易 2:一般 3:困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 5;
    private string from_ = "";
    /// <summary>
    ///试题来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    /// <summary>
    ///试题状态 0:关闭(学生自测不可见) 1:开发(学生自测可见)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    ///试题题干
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 8;
    private string key_ = "";
    /// <summary>
    ///试题答案 单选题：A 多选题：ABC 判断题：Y/N 填空题：',' 隔开 问答题：...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve" field.</summary>
    public const int ResolveFieldNumber = 9;
    private string resolve_ = "";
    /// <summary>
    ///试题解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolve {
      get { return resolve_; }
      set {
        resolve_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 10;
    private string poster_ = "";
    /// <summary>
    ///添加人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 11;
    private string data_ = "";
    /// <summary>
    ///题目数据 json格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BankId != other.BankId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (From != other.From) return false;
      if (Status != other.Status) return false;
      if (Content != other.Content) return false;
      if (Key != other.Key) return false;
      if (Resolve != other.Resolve) return false;
      if (Poster != other.Poster) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Resolve.Length != 0) hash ^= Resolve.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BankId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BankId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SoftwareId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (From.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(From);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Key);
      }
      if (Resolve.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Resolve);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Poster);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Resolve.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolve);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertQuestionReq other) {
      if (other == null) {
        return;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Resolve.Length != 0) {
        Resolve = other.Resolve;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BankId = input.ReadString();
            break;
          }
          case 18: {
            SoftwareId = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 42: {
            From = input.ReadString();
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 66: {
            Key = input.ReadString();
            break;
          }
          case 74: {
            Resolve = input.ReadString();
            break;
          }
          case 82: {
            Poster = input.ReadString();
            break;
          }
          case 90: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of delete question
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteQuestionReq : pb::IMessage<DeleteQuestionReq> {
    private static readonly pb::MessageParser<DeleteQuestionReq> _parser = new pb::MessageParser<DeleteQuestionReq>(() => new DeleteQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionReq(DeleteQuestionReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionReq Clone() {
      return new DeleteQuestionReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteQuestionReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of update question
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateQuestionReq : pb::IMessage<UpdateQuestionReq> {
    private static readonly pb::MessageParser<UpdateQuestionReq> _parser = new pb::MessageParser<UpdateQuestionReq>(() => new UpdateQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionReq(UpdateQuestionReq other) : this() {
      id_ = other.id_;
      bankId_ = other.bankId_;
      softwareId_ = other.softwareId_;
      type_ = other.type_;
      level_ = other.level_;
      from_ = other.from_;
      status_ = other.status_;
      content_ = other.content_;
      key_ = other.key_;
      resolve_ = other.resolve_;
      modifier_ = other.modifier_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionReq Clone() {
      return new UpdateQuestionReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bankId" field.</summary>
    public const int BankIdFieldNumber = 2;
    private string bankId_ = "";
    /// <summary>
    ///题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///0:单选题 1:多选题 2:判断题 3:填空题 4:简答题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///1:容易 2:一般 3:困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 6;
    private string from_ = "";
    /// <summary>
    ///试题来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    /// <summary>
    ///试题状态 0:关闭(学生自测不可见) 1:开发(学生自测可见)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private string content_ = "";
    /// <summary>
    ///试题题干
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 9;
    private string key_ = "";
    /// <summary>
    ///试题答案 单选题：A 多选题：ABC 判断题：Y/N 填空题：',' 隔开 问答题：...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve" field.</summary>
    public const int ResolveFieldNumber = 10;
    private string resolve_ = "";
    /// <summary>
    ///试题解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolve {
      get { return resolve_; }
      set {
        resolve_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 11;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 12;
    private string data_ = "";
    /// <summary>
    ///题目数据 json格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BankId != other.BankId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (From != other.From) return false;
      if (Status != other.Status) return false;
      if (Content != other.Content) return false;
      if (Key != other.Key) return false;
      if (Resolve != other.Resolve) return false;
      if (Modifier != other.Modifier) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Resolve.Length != 0) hash ^= Resolve.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BankId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (From.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(From);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Content);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Key);
      }
      if (Resolve.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resolve);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Modifier);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Resolve.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolve);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateQuestionReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Resolve.Length != 0) {
        Resolve = other.Resolve;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BankId = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            From = input.ReadString();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 66: {
            Content = input.ReadString();
            break;
          }
          case 74: {
            Key = input.ReadString();
            break;
          }
          case 82: {
            Resolve = input.ReadString();
            break;
          }
          case 90: {
            Modifier = input.ReadString();
            break;
          }
          case 98: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get question by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetQuestionReq : pb::IMessage<GetQuestionReq> {
    private static readonly pb::MessageParser<GetQuestionReq> _parser = new pb::MessageParser<GetQuestionReq>(() => new GetQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionReq(GetQuestionReq other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionReq Clone() {
      return new GetQuestionReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionReq other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of get question by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetQuestionByConditionReq : pb::IMessage<GetQuestionByConditionReq> {
    private static readonly pb::MessageParser<GetQuestionByConditionReq> _parser = new pb::MessageParser<GetQuestionByConditionReq>(() => new GetQuestionByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionReq(GetQuestionByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionReq Clone() {
      return new GetQuestionByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of list all question
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListAllQuestionReq : pb::IMessage<ListAllQuestionReq> {
    private static readonly pb::MessageParser<ListAllQuestionReq> _parser = new pb::MessageParser<ListAllQuestionReq>(() => new ListAllQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionReq(ListAllQuestionReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionReq Clone() {
      return new ListAllQuestionReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllQuestionReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of list question by condition
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class ListQuestionByConditionReq : pb::IMessage<ListQuestionByConditionReq> {
    private static readonly pb::MessageParser<ListQuestionByConditionReq> _parser = new pb::MessageParser<ListQuestionByConditionReq>(() => new ListQuestionByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListQuestionByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionReq(ListQuestionByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionReq Clone() {
      return new ListQuestionByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListQuestionByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListQuestionByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListQuestionByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count question
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class CountQuestionReq : pb::IMessage<CountQuestionReq> {
    private static readonly pb::MessageParser<CountQuestionReq> _parser = new pb::MessageParser<CountQuestionReq>(() => new CountQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionReq(CountQuestionReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionReq Clone() {
      return new CountQuestionReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///The request of page question
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class PageQuestionReq : pb::IMessage<PageQuestionReq> {
    private static readonly pb::MessageParser<PageQuestionReq> _parser = new pb::MessageParser<PageQuestionReq>(() => new PageQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionReq(PageQuestionReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionReq Clone() {
      return new PageQuestionReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of count question by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class CountQuestionByConditionReq : pb::IMessage<CountQuestionByConditionReq> {
    private static readonly pb::MessageParser<CountQuestionByConditionReq> _parser = new pb::MessageParser<CountQuestionByConditionReq>(() => new CountQuestionByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionReq(CountQuestionByConditionReq other) : this() {
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionReq Clone() {
      return new CountQuestionByConditionReq(this);
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionByConditionReq other) {
      if (other == null) {
        return;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of page question by condition
  ///commandId = 0x00*B
  /// </summary>
  public sealed partial class PageQuestionByConditionReq : pb::IMessage<PageQuestionByConditionReq> {
    private static readonly pb::MessageParser<PageQuestionByConditionReq> _parser = new pb::MessageParser<PageQuestionByConditionReq>(() => new PageQuestionByConditionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionByConditionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionReq(PageQuestionByConditionReq other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionReq Clone() {
      return new PageQuestionByConditionReq(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the current page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::XFramework.Proto.SqlConditionProto> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(26, global::XFramework.Proto.SqlConditionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> conditions_ = new pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto>();
    /// <summary>
    ///query condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.SqlConditionProto> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionByConditionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionByConditionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionByConditionReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch insert question
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertQuestionReq : pb::IMessage<BatchInsertQuestionReq> {
    private static readonly pb::MessageParser<BatchInsertQuestionReq> _parser = new pb::MessageParser<BatchInsertQuestionReq>(() => new BatchInsertQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionReq(BatchInsertQuestionReq other) : this() {
      insertQuestions_ = other.insertQuestions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionReq Clone() {
      return new BatchInsertQuestionReq(this);
    }

    /// <summary>Field number for the "InsertQuestions" field.</summary>
    public const int InsertQuestionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.InsertQuestionReq> _repeated_insertQuestions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.InsertQuestionReq.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.InsertQuestionReq> insertQuestions_ = new pbc::RepeatedField<global::XFramework.Proto.InsertQuestionReq>();
    /// <summary>
    ///试题items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.InsertQuestionReq> InsertQuestions {
      get { return insertQuestions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!insertQuestions_.Equals(other.insertQuestions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= insertQuestions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      insertQuestions_.WriteTo(output, _repeated_insertQuestions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += insertQuestions_.CalculateSize(_repeated_insertQuestions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertQuestionReq other) {
      if (other == null) {
        return;
      }
      insertQuestions_.Add(other.insertQuestions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            insertQuestions_.AddEntriesFrom(input, _repeated_insertQuestions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The request of batch delete question
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteQuestionReq : pb::IMessage<BatchDeleteQuestionReq> {
    private static readonly pb::MessageParser<BatchDeleteQuestionReq> _parser = new pb::MessageParser<BatchDeleteQuestionReq>(() => new BatchDeleteQuestionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteQuestionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionReqProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionReq(BatchDeleteQuestionReq other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionReq Clone() {
      return new BatchDeleteQuestionReq(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///试题items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteQuestionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteQuestionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteQuestionReq other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
