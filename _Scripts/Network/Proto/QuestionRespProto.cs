// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuestionRespProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XFramework.Proto {

  /// <summary>Holder for reflection information generated from QuestionRespProto.proto</summary>
  public static partial class QuestionRespProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for QuestionRespProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuestionRespProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdRdWVzdGlvblJlc3BQcm90by5wcm90byJBChJJbnNlcnRRdWVzdGlvblJl",
            "c3ASDwoHc3VjY2VzcxgBIAEoCBIKCgJpZBgCIAEoCRIOCgZkZXRhaWwYAyAB",
            "KAkiNQoSRGVsZXRlUXVlc3Rpb25SZXNwEg8KB3N1Y2Nlc3MYASABKAgSDgoG",
            "ZGV0YWlsGAIgASgJIjUKElVwZGF0ZVF1ZXN0aW9uUmVzcBIPCgdzdWNjZXNz",
            "GAEgASgIEg4KBmRldGFpbBgCIAEoCSIzCg9HZXRRdWVzdGlvblJlc3ASIAoI",
            "cXVlc3Rpb24YASABKAsyDi5RdWVzdGlvblByb3RvIj4KGkdldFF1ZXN0aW9u",
            "QnlDb25kaXRpb25SZXNwEiAKCHF1ZXN0aW9uGAEgASgLMg4uUXVlc3Rpb25Q",
            "cm90byI4ChNMaXN0QWxsUXVlc3Rpb25SZXNwEiEKCXF1ZXN0aW9ucxgBIAMo",
            "CzIOLlF1ZXN0aW9uUHJvdG8iQAobTGlzdFF1ZXN0aW9uQnlDb25kaXRpb25S",
            "ZXNwEiEKCXF1ZXN0aW9ucxgBIAMoCzIOLlF1ZXN0aW9uUHJvdG8iIgoRQ291",
            "bnRRdWVzdGlvblJlc3ASDQoFY291bnQYASABKAUihgEKEFBhZ2VRdWVzdGlv",
            "blJlc3ASEwoLY3VycmVudFBhZ2UYASABKAUSEAoIcGFnZVNpemUYAiABKAUS",
            "FAoMdG90YWxSZWNvcmRzGAMgASgFEhIKCnRvdGFsUGFnZXMYBCABKAUSIQoJ",
            "cXVlc3Rpb25zGAUgAygLMg4uUXVlc3Rpb25Qcm90byItChxDb3VudFF1ZXN0",
            "aW9uQnlDb25kaXRpb25SZXNwEg0KBWNvdW50GAEgASgFIpEBChtQYWdlUXVl",
            "c3Rpb25CeUNvbmRpdGlvblJlc3ASEwoLY3VycmVudFBhZ2UYASABKAUSEAoI",
            "cGFnZVNpemUYAiABKAUSFAoMdG90YWxSZWNvcmRzGAMgASgFEhIKCnRvdGFs",
            "UGFnZXMYBCABKAUSIQoJcXVlc3Rpb25zGAUgAygLMg4uUXVlc3Rpb25Qcm90",
            "byIuChdCYXRjaEluc2VydFF1ZXN0aW9uUmVzcBITCgtiYXRjaFJlc3VsdBgB",
            "IAEoCSIuChdCYXRjaERlbGV0ZVF1ZXN0aW9uUmVzcBITCgtiYXRjaFJlc3Vs",
            "dBgBIAEoCSKBAgoNUXVlc3Rpb25Qcm90bxIKCgJpZBgBIAEoCRIOCgZiYW5r",
            "SWQYAiABKAkSEgoKc29mdHdhcmVJZBgDIAEoCRIMCgR0eXBlGAQgASgFEg0K",
            "BWxldmVsGAUgASgFEgwKBGZyb20YBiABKAkSDgoGc3RhdHVzGAcgASgFEg8K",
            "B2NvbnRlbnQYCCABKAkSCwoDa2V5GAkgASgJEg8KB3Jlc29sdmUYCiABKAkS",
            "DgoGcG9zdGVyGAsgASgJEhIKCmNyZWF0ZVRpbWUYDCABKAMSEAoIbW9kaWZp",
            "ZXIYDSABKAkSEgoKdXBkYXRlVGltZRgOIAEoAxIMCgRkYXRhGA8gASgJQjwK",
            "FGNuLmNvbS54ei5wcm90by5leGFtQhFRdWVzdGlvblJlc3BQcm90b6oCEFhG",
            "cmFtZXdvcmsuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.InsertQuestionResp), global::XFramework.Proto.InsertQuestionResp.Parser, new[]{ "Success", "Id", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.DeleteQuestionResp), global::XFramework.Proto.DeleteQuestionResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.UpdateQuestionResp), global::XFramework.Proto.UpdateQuestionResp.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionResp), global::XFramework.Proto.GetQuestionResp.Parser, new[]{ "Question" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.GetQuestionByConditionResp), global::XFramework.Proto.GetQuestionByConditionResp.Parser, new[]{ "Question" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListAllQuestionResp), global::XFramework.Proto.ListAllQuestionResp.Parser, new[]{ "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.ListQuestionByConditionResp), global::XFramework.Proto.ListQuestionByConditionResp.Parser, new[]{ "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionResp), global::XFramework.Proto.CountQuestionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionResp), global::XFramework.Proto.PageQuestionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.CountQuestionByConditionResp), global::XFramework.Proto.CountQuestionByConditionResp.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.PageQuestionByConditionResp), global::XFramework.Proto.PageQuestionByConditionResp.Parser, new[]{ "CurrentPage", "PageSize", "TotalRecords", "TotalPages", "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchInsertQuestionResp), global::XFramework.Proto.BatchInsertQuestionResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.BatchDeleteQuestionResp), global::XFramework.Proto.BatchDeleteQuestionResp.Parser, new[]{ "BatchResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XFramework.Proto.QuestionProto), global::XFramework.Proto.QuestionProto.Parser, new[]{ "Id", "BankId", "SoftwareId", "Type", "Level", "From", "Status", "Content", "Key", "Resolve", "Poster", "CreateTime", "Modifier", "UpdateTime", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The response of add question
  ///commandId = 0x00*1
  /// </summary>
  public sealed partial class InsertQuestionResp : pb::IMessage<InsertQuestionResp> {
    private static readonly pb::MessageParser<InsertQuestionResp> _parser = new pb::MessageParser<InsertQuestionResp>(() => new InsertQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionResp(InsertQuestionResp other) : this() {
      success_ = other.success_;
      id_ = other.id_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertQuestionResp Clone() {
      return new InsertQuestionResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Id != other.Id) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of delete question
  ///commandId = 0x00*2
  /// </summary>
  public sealed partial class DeleteQuestionResp : pb::IMessage<DeleteQuestionResp> {
    private static readonly pb::MessageParser<DeleteQuestionResp> _parser = new pb::MessageParser<DeleteQuestionResp>(() => new DeleteQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionResp(DeleteQuestionResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteQuestionResp Clone() {
      return new DeleteQuestionResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of update question
  ///commandId = 0x00*3
  /// </summary>
  public sealed partial class UpdateQuestionResp : pb::IMessage<UpdateQuestionResp> {
    private static readonly pb::MessageParser<UpdateQuestionResp> _parser = new pb::MessageParser<UpdateQuestionResp>(() => new UpdateQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionResp(UpdateQuestionResp other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestionResp Clone() {
      return new UpdateQuestionResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///whether it is successful or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get question by id
  ///commandId = 0x00*4
  /// </summary>
  public sealed partial class GetQuestionResp : pb::IMessage<GetQuestionResp> {
    private static readonly pb::MessageParser<GetQuestionResp> _parser = new pb::MessageParser<GetQuestionResp>(() => new GetQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionResp(GetQuestionResp other) : this() {
      Question = other.question_ != null ? other.Question.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionResp Clone() {
      return new GetQuestionResp(this);
    }

    /// <summary>Field number for the "question" field.</summary>
    public const int QuestionFieldNumber = 1;
    private global::XFramework.Proto.QuestionProto question_;
    /// <summary>
    ///试题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.QuestionProto Question {
      get { return question_; }
      set {
        question_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Question, other.Question)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (question_ != null) hash ^= Question.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (question_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (question_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Question);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.question_ != null) {
        if (question_ == null) {
          question_ = new global::XFramework.Proto.QuestionProto();
        }
        Question.MergeFrom(other.Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (question_ == null) {
              question_ = new global::XFramework.Proto.QuestionProto();
            }
            input.ReadMessage(question_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of get question by condition
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class GetQuestionByConditionResp : pb::IMessage<GetQuestionByConditionResp> {
    private static readonly pb::MessageParser<GetQuestionByConditionResp> _parser = new pb::MessageParser<GetQuestionByConditionResp>(() => new GetQuestionByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuestionByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionResp(GetQuestionByConditionResp other) : this() {
      Question = other.question_ != null ? other.Question.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuestionByConditionResp Clone() {
      return new GetQuestionByConditionResp(this);
    }

    /// <summary>Field number for the "question" field.</summary>
    public const int QuestionFieldNumber = 1;
    private global::XFramework.Proto.QuestionProto question_;
    /// <summary>
    ///试题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::XFramework.Proto.QuestionProto Question {
      get { return question_; }
      set {
        question_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuestionByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuestionByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Question, other.Question)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (question_ != null) hash ^= Question.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (question_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (question_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Question);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuestionByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.question_ != null) {
        if (question_ == null) {
          question_ = new global::XFramework.Proto.QuestionProto();
        }
        Question.MergeFrom(other.Question);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (question_ == null) {
              question_ = new global::XFramework.Proto.QuestionProto();
            }
            input.ReadMessage(question_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list all question
  ///commandId = 0x00*5
  /// </summary>
  public sealed partial class ListAllQuestionResp : pb::IMessage<ListAllQuestionResp> {
    private static readonly pb::MessageParser<ListAllQuestionResp> _parser = new pb::MessageParser<ListAllQuestionResp>(() => new ListAllQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionResp(ListAllQuestionResp other) : this() {
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllQuestionResp Clone() {
      return new ListAllQuestionResp(this);
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.QuestionProto> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.QuestionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.QuestionProto> questions_ = new pbc::RepeatedField<global::XFramework.Proto.QuestionProto>();
    /// <summary>
    ///The list of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.QuestionProto> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllQuestionResp other) {
      if (other == null) {
        return;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of list question by condition
  ///commandId = 0x00*6
  /// </summary>
  public sealed partial class ListQuestionByConditionResp : pb::IMessage<ListQuestionByConditionResp> {
    private static readonly pb::MessageParser<ListQuestionByConditionResp> _parser = new pb::MessageParser<ListQuestionByConditionResp>(() => new ListQuestionByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListQuestionByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionResp(ListQuestionByConditionResp other) : this() {
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListQuestionByConditionResp Clone() {
      return new ListQuestionByConditionResp(this);
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::XFramework.Proto.QuestionProto> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(10, global::XFramework.Proto.QuestionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.QuestionProto> questions_ = new pbc::RepeatedField<global::XFramework.Proto.QuestionProto>();
    /// <summary>
    ///The list of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.QuestionProto> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListQuestionByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListQuestionByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListQuestionByConditionResp other) {
      if (other == null) {
        return;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count question
  ///commandId = 0x00*7
  /// </summary>
  public sealed partial class CountQuestionResp : pb::IMessage<CountQuestionResp> {
    private static readonly pb::MessageParser<CountQuestionResp> _parser = new pb::MessageParser<CountQuestionResp>(() => new CountQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionResp(CountQuestionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionResp Clone() {
      return new CountQuestionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page question
  ///commandId = 0x00*8
  /// </summary>
  public sealed partial class PageQuestionResp : pb::IMessage<PageQuestionResp> {
    private static readonly pb::MessageParser<PageQuestionResp> _parser = new pb::MessageParser<PageQuestionResp>(() => new PageQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionResp(PageQuestionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionResp Clone() {
      return new PageQuestionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.QuestionProto> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.QuestionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.QuestionProto> questions_ = new pbc::RepeatedField<global::XFramework.Proto.QuestionProto>();
    /// <summary>
    ///The list of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.QuestionProto> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of count question by condition
  ///commandId = 0x00*9
  /// </summary>
  public sealed partial class CountQuestionByConditionResp : pb::IMessage<CountQuestionByConditionResp> {
    private static readonly pb::MessageParser<CountQuestionByConditionResp> _parser = new pb::MessageParser<CountQuestionByConditionResp>(() => new CountQuestionByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountQuestionByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionResp(CountQuestionByConditionResp other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountQuestionByConditionResp Clone() {
      return new CountQuestionByConditionResp(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///The total number of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountQuestionByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountQuestionByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountQuestionByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of page question by condition
  ///commandId = 0x00*A
  /// </summary>
  public sealed partial class PageQuestionByConditionResp : pb::IMessage<PageQuestionByConditionResp> {
    private static readonly pb::MessageParser<PageQuestionByConditionResp> _parser = new pb::MessageParser<PageQuestionByConditionResp>(() => new PageQuestionByConditionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageQuestionByConditionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionResp(PageQuestionByConditionResp other) : this() {
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      totalRecords_ = other.totalRecords_;
      totalPages_ = other.totalPages_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageQuestionByConditionResp Clone() {
      return new PageQuestionByConditionResp(this);
    }

    /// <summary>Field number for the "currentPage" field.</summary>
    public const int CurrentPageFieldNumber = 1;
    private int currentPage_;
    /// <summary>
    ///the number of current page 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///the size of the page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 3;
    private int totalRecords_;
    /// <summary>
    ///total number of records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private int totalPages_;
    /// <summary>
    ///number of total pages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::XFramework.Proto.QuestionProto> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(42, global::XFramework.Proto.QuestionProto.Parser);
    private readonly pbc::RepeatedField<global::XFramework.Proto.QuestionProto> questions_ = new pbc::RepeatedField<global::XFramework.Proto.QuestionProto>();
    /// <summary>
    ///The list of question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::XFramework.Proto.QuestionProto> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageQuestionByConditionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageQuestionByConditionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (TotalRecords != other.TotalRecords) return false;
      if (TotalPages != other.TotalPages) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TotalRecords != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRecords);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPages);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageQuestionByConditionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPages = input.ReadInt32();
            break;
          }
          case 42: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch insert question
  ///commandId = 0x00*C
  /// </summary>
  public sealed partial class BatchInsertQuestionResp : pb::IMessage<BatchInsertQuestionResp> {
    private static readonly pb::MessageParser<BatchInsertQuestionResp> _parser = new pb::MessageParser<BatchInsertQuestionResp>(() => new BatchInsertQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchInsertQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionResp(BatchInsertQuestionResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchInsertQuestionResp Clone() {
      return new BatchInsertQuestionResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量添加试题的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchInsertQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchInsertQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchInsertQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///The response of batch delete question
  ///commandId = 0x00*D
  /// </summary>
  public sealed partial class BatchDeleteQuestionResp : pb::IMessage<BatchDeleteQuestionResp> {
    private static readonly pb::MessageParser<BatchDeleteQuestionResp> _parser = new pb::MessageParser<BatchDeleteQuestionResp>(() => new BatchDeleteQuestionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchDeleteQuestionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionResp(BatchDeleteQuestionResp other) : this() {
      batchResult_ = other.batchResult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchDeleteQuestionResp Clone() {
      return new BatchDeleteQuestionResp(this);
    }

    /// <summary>Field number for the "batchResult" field.</summary>
    public const int BatchResultFieldNumber = 1;
    private string batchResult_ = "";
    /// <summary>
    ///批量删除试题的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BatchResult {
      get { return batchResult_; }
      set {
        batchResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchDeleteQuestionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchDeleteQuestionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchResult != other.BatchResult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchResult.Length != 0) hash ^= BatchResult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BatchResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BatchResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchDeleteQuestionResp other) {
      if (other == null) {
        return;
      }
      if (other.BatchResult.Length != 0) {
        BatchResult = other.BatchResult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BatchResult = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///试题
  /// </summary>
  public sealed partial class QuestionProto : pb::IMessage<QuestionProto> {
    private static readonly pb::MessageParser<QuestionProto> _parser = new pb::MessageParser<QuestionProto>(() => new QuestionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XFramework.Proto.QuestionRespProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionProto(QuestionProto other) : this() {
      id_ = other.id_;
      bankId_ = other.bankId_;
      softwareId_ = other.softwareId_;
      type_ = other.type_;
      level_ = other.level_;
      from_ = other.from_;
      status_ = other.status_;
      content_ = other.content_;
      key_ = other.key_;
      resolve_ = other.resolve_;
      poster_ = other.poster_;
      createTime_ = other.createTime_;
      modifier_ = other.modifier_;
      updateTime_ = other.updateTime_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionProto Clone() {
      return new QuestionProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///试题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bankId" field.</summary>
    public const int BankIdFieldNumber = 2;
    private string bankId_ = "";
    /// <summary>
    ///题库id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softwareId" field.</summary>
    public const int SoftwareIdFieldNumber = 3;
    private string softwareId_ = "";
    /// <summary>
    ///软件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareId {
      get { return softwareId_; }
      set {
        softwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///0:单选题 1:多选题 2:判断题 3:填空题 4:简答题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///1:容易 2:一般 3:困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 6;
    private string from_ = "";
    /// <summary>
    ///试题来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    /// <summary>
    ///试题状态 0:关闭(学生自测不可见) 1:开发(学生自测可见)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private string content_ = "";
    /// <summary>
    ///试题题干
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 9;
    private string key_ = "";
    /// <summary>
    ///试题答案 单选题：A 多选题：ABC 判断题：Y/N 填空题：',' 隔开 问答题：...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve" field.</summary>
    public const int ResolveFieldNumber = 10;
    private string resolve_ = "";
    /// <summary>
    ///试题解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolve {
      get { return resolve_; }
      set {
        resolve_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poster" field.</summary>
    public const int PosterFieldNumber = 11;
    private string poster_ = "";
    /// <summary>
    ///添加人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Poster {
      get { return poster_; }
      set {
        poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 12;
    private long createTime_;
    /// <summary>
    ///创建日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "modifier" field.</summary>
    public const int ModifierFieldNumber = 13;
    private string modifier_ = "";
    /// <summary>
    ///修改人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Modifier {
      get { return modifier_; }
      set {
        modifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 14;
    private long updateTime_;
    /// <summary>
    ///修改日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 15;
    private string data_ = "";
    /// <summary>
    ///题目数据 json格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BankId != other.BankId) return false;
      if (SoftwareId != other.SoftwareId) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (From != other.From) return false;
      if (Status != other.Status) return false;
      if (Content != other.Content) return false;
      if (Key != other.Key) return false;
      if (Resolve != other.Resolve) return false;
      if (Poster != other.Poster) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Modifier != other.Modifier) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (SoftwareId.Length != 0) hash ^= SoftwareId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Resolve.Length != 0) hash ^= Resolve.GetHashCode();
      if (Poster.Length != 0) hash ^= Poster.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Modifier.Length != 0) hash ^= Modifier.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BankId);
      }
      if (SoftwareId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (From.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(From);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Content);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Key);
      }
      if (Resolve.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resolve);
      }
      if (Poster.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Poster);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(CreateTime);
      }
      if (Modifier.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Modifier);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(UpdateTime);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (SoftwareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Resolve.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolve);
      }
      if (Poster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Modifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Modifier);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestionProto other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.SoftwareId.Length != 0) {
        SoftwareId = other.SoftwareId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Resolve.Length != 0) {
        Resolve = other.Resolve;
      }
      if (other.Poster.Length != 0) {
        Poster = other.Poster;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Modifier.Length != 0) {
        Modifier = other.Modifier;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BankId = input.ReadString();
            break;
          }
          case 26: {
            SoftwareId = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            From = input.ReadString();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 66: {
            Content = input.ReadString();
            break;
          }
          case 74: {
            Key = input.ReadString();
            break;
          }
          case 82: {
            Resolve = input.ReadString();
            break;
          }
          case 90: {
            Poster = input.ReadString();
            break;
          }
          case 96: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 106: {
            Modifier = input.ReadString();
            break;
          }
          case 112: {
            UpdateTime = input.ReadInt64();
            break;
          }
          case 122: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
